
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bdc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08002d6c  08002d6c  00012d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ecc  08002ecc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002ecc  08002ecc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ecc  08002ecc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ecc  08002ecc  00012ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ed0  08002ed0  00012ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000070  08002f44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  08002f44  00020244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000727b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015a7  00000000  00000000  0002731b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000640  00000000  00000000  000288c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000598  00000000  00000000  00028f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000254f  00000000  00000000  000294a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b0a  00000000  00000000  0002b9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce3f7  00000000  00000000  000334f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001018f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022c4  00000000  00000000  00101944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000009c  00000000  00000000  00103c08  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000014d  00000000  00000000  00103ca4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002d54 	.word	0x08002d54

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002d54 	.word	0x08002d54

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <SysTick_Handler>:


extern UART_HandleTypeDef huart2;

void SysTick_Handler (void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000284:	f000 fa4c 	bl	8000720 <HAL_IncTick>
	HAL_SYSTICK_IRQHandler();
 8000288:	f000 fb7b 	bl	8000982 <HAL_SYSTICK_IRQHandler>
}
 800028c:	bf00      	nop
 800028e:	bd80      	pop	{r7, pc}

08000290 <USART2_IRQHandler>:


void USART2_IRQHandler(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	HAL_UART_IRQHandler(&huart2);
 8000294:	4802      	ldr	r0, [pc, #8]	; (80002a0 <USART2_IRQHandler+0x10>)
 8000296:	f000 fea7 	bl	8000fe8 <HAL_UART_IRQHandler>

}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	20000188 	.word	0x20000188

080002a4 <printmsg>:
uint32_t control = 0;

extern void initialise_monitor_handles();

void printmsg(char *format,...)
 {
 80002a4:	b40f      	push	{r0, r1, r2, r3}
 80002a6:	b580      	push	{r7, lr}
 80002a8:	b096      	sub	sp, #88	; 0x58
 80002aa:	af00      	add	r7, sp, #0

	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80002ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80002b0:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 80002b2:	f107 0308 	add.w	r3, r7, #8
 80002b6:	687a      	ldr	r2, [r7, #4]
 80002b8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80002ba:	4618      	mov	r0, r3
 80002bc:	f001 fc12 	bl	8001ae4 <vsiprintf>
	HAL_UART_Transmit(&huart2,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80002c0:	f107 0308 	add.w	r3, r7, #8
 80002c4:	4618      	mov	r0, r3
 80002c6:	f7ff ff83 	bl	80001d0 <strlen>
 80002ca:	4603      	mov	r3, r0
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	f107 0108 	add.w	r1, r7, #8
 80002d2:	f04f 33ff 	mov.w	r3, #4294967295
 80002d6:	4805      	ldr	r0, [pc, #20]	; (80002ec <printmsg+0x48>)
 80002d8:	f000 fd9f 	bl	8000e1a <HAL_UART_Transmit>
	va_end(args);

 }
 80002dc:	bf00      	nop
 80002de:	3758      	adds	r7, #88	; 0x58
 80002e0:	46bd      	mov	sp, r7
 80002e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80002e6:	b004      	add	sp, #16
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20000188 	.word	0x20000188

080002f0 <Messages>:
//extern void initialise_monitor_handles();

static void Messages(char *p[])
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
	p[0]=",Hello!,";
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a08      	ldr	r2, [pc, #32]	; (800031c <Messages+0x2c>)
 80002fc:	601a      	str	r2, [r3, #0]
	p[1]=",enes,";
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3304      	adds	r3, #4
 8000302:	4a07      	ldr	r2, [pc, #28]	; (8000320 <Messages+0x30>)
 8000304:	601a      	str	r2, [r3, #0]
	p[2]=",goku,";
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	3308      	adds	r3, #8
 800030a:	4a06      	ldr	r2, [pc, #24]	; (8000324 <Messages+0x34>)
 800030c:	601a      	str	r2, [r3, #0]
}
 800030e:	bf00      	nop
 8000310:	370c      	adds	r7, #12
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	08002d6c 	.word	0x08002d6c
 8000320:	08002d78 	.word	0x08002d78
 8000324:	08002d80 	.word	0x08002d80

08000328 <main>:

int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
	HAL_Init();
 800032c:	f000 f9a6 	bl	800067c <HAL_Init>
	SystemClockConfig();
 8000330:	f000 f822 	bl	8000378 <SystemClockConfig>
	UART2_Init();
 8000334:	f000 f828 	bl	8000388 <UART2_Init>

	//initialise_monitor_handles();

	//printmsg("AT+SEND=0,5,HELLO\r\n");
	printf("Starting...\n");
 8000338:	480a      	ldr	r0, [pc, #40]	; (8000364 <main+0x3c>)
 800033a:	f001 fb95 	bl	8001a68 <puts>
	delay(500000);
 800033e:	480a      	ldr	r0, [pc, #40]	; (8000368 <main+0x40>)
 8000340:	f000 f8e1 	bl	8000506 <delay>
	delay(500000);
 8000344:	4808      	ldr	r0, [pc, #32]	; (8000368 <main+0x40>)
 8000346:	f000 f8de 	bl	8000506 <delay>
	delay(500000);
 800034a:	4807      	ldr	r0, [pc, #28]	; (8000368 <main+0x40>)
 800034c:	f000 f8db 	bl	8000506 <delay>

	Messages(AllMsg);
 8000350:	4806      	ldr	r0, [pc, #24]	; (800036c <main+0x44>)
 8000352:	f7ff ffcd 	bl	80002f0 <Messages>
	//strcpy(OneMsg,AllMsg[0]);
	//printf("OneMsg: %c\n",OneMsg[5]);

    while(1)
    {
    	HAL_UART_Receive_IT(&huart2,&recvd_data,1);
 8000356:	2201      	movs	r2, #1
 8000358:	4905      	ldr	r1, [pc, #20]	; (8000370 <main+0x48>)
 800035a:	4806      	ldr	r0, [pc, #24]	; (8000374 <main+0x4c>)
 800035c:	f000 fdf6 	bl	8000f4c <HAL_UART_Receive_IT>
 8000360:	e7f9      	b.n	8000356 <main+0x2e>
 8000362:	bf00      	nop
 8000364:	08002d88 	.word	0x08002d88
 8000368:	0007a120 	.word	0x0007a120
 800036c:	200000a8 	.word	0x200000a8
 8000370:	200000b8 	.word	0x200000b8
 8000374:	20000188 	.word	0x20000188

08000378 <SystemClockConfig>:
    return 0;
}


void SystemClockConfig(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0


}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <UART2_Init>:


void UART2_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 800038c:	4b0f      	ldr	r3, [pc, #60]	; (80003cc <UART2_Init+0x44>)
 800038e:	4a10      	ldr	r2, [pc, #64]	; (80003d0 <UART2_Init+0x48>)
 8000390:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000392:	4b0e      	ldr	r3, [pc, #56]	; (80003cc <UART2_Init+0x44>)
 8000394:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000398:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800039a:	4b0c      	ldr	r3, [pc, #48]	; (80003cc <UART2_Init+0x44>)
 800039c:	2200      	movs	r2, #0
 800039e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <UART2_Init+0x44>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80003a6:	4b09      	ldr	r3, [pc, #36]	; (80003cc <UART2_Init+0x44>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	611a      	str	r2, [r3, #16]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <UART2_Init+0x44>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	619a      	str	r2, [r3, #24]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <UART2_Init+0x44>)
 80003b4:	220c      	movs	r2, #12
 80003b6:	615a      	str	r2, [r3, #20]
	if ( HAL_UART_Init(&huart2) != HAL_OK )
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <UART2_Init+0x44>)
 80003ba:	f000 fce1 	bl	8000d80 <HAL_UART_Init>
 80003be:	4603      	mov	r3, r0
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d001      	beq.n	80003c8 <UART2_Init+0x40>
	{
	//There is a problem
		Error_handler();
 80003c4:	f000 f89c 	bl	8000500 <Error_handler>
	}

}
 80003c8:	bf00      	nop
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000188 	.word	0x20000188
 80003d0:	40004400 	.word	0x40004400

080003d4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]

	if(recvd_data == '\r')
 80003dc:	4b39      	ldr	r3, [pc, #228]	; (80004c4 <HAL_UART_RxCpltCallback+0xf0>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b0d      	cmp	r3, #13
 80003e2:	d161      	bne.n	80004a8 <HAL_UART_RxCpltCallback+0xd4>
	{
		reception_complete = TRUE;
 80003e4:	4b38      	ldr	r3, [pc, #224]	; (80004c8 <HAL_UART_RxCpltCallback+0xf4>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
		data_buffer[count++]='\r';
 80003ea:	4b38      	ldr	r3, [pc, #224]	; (80004cc <HAL_UART_RxCpltCallback+0xf8>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	1c5a      	adds	r2, r3, #1
 80003f0:	4936      	ldr	r1, [pc, #216]	; (80004cc <HAL_UART_RxCpltCallback+0xf8>)
 80003f2:	600a      	str	r2, [r1, #0]
 80003f4:	4a36      	ldr	r2, [pc, #216]	; (80004d0 <HAL_UART_RxCpltCallback+0xfc>)
 80003f6:	210d      	movs	r1, #13
 80003f8:	54d1      	strb	r1, [r2, r3]
		//HAL_UART_Transmit(huart,data_buffer,count,HAL_MAX_DELAY);
		printf("data_buffer: %s\n",data_buffer);
 80003fa:	4935      	ldr	r1, [pc, #212]	; (80004d0 <HAL_UART_RxCpltCallback+0xfc>)
 80003fc:	4835      	ldr	r0, [pc, #212]	; (80004d4 <HAL_UART_RxCpltCallback+0x100>)
 80003fe:	f001 faad 	bl	800195c <iprintf>
		//strcpy(OneMsg,AllMsg[1]);

		for(int OrderOfAllMsg=0;OrderOfAllMsg<NoOfMsg;OrderOfAllMsg++)
 8000402:	2300      	movs	r3, #0
 8000404:	60fb      	str	r3, [r7, #12]
 8000406:	e037      	b.n	8000478 <HAL_UART_RxCpltCallback+0xa4>
		{
			strcpy(OneMsg,AllMsg[OrderOfAllMsg]);
 8000408:	4a33      	ldr	r2, [pc, #204]	; (80004d8 <HAL_UART_RxCpltCallback+0x104>)
 800040a:	68fb      	ldr	r3, [r7, #12]
 800040c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000410:	4619      	mov	r1, r3
 8000412:	4832      	ldr	r0, [pc, #200]	; (80004dc <HAL_UART_RxCpltCallback+0x108>)
 8000414:	f001 fb30 	bl	8001a78 <strcpy>

			ret = strstr(data_buffer, OneMsg);
 8000418:	4930      	ldr	r1, [pc, #192]	; (80004dc <HAL_UART_RxCpltCallback+0x108>)
 800041a:	482d      	ldr	r0, [pc, #180]	; (80004d0 <HAL_UART_RxCpltCallback+0xfc>)
 800041c:	f001 fb34 	bl	8001a88 <strstr>
 8000420:	4603      	mov	r3, r0
 8000422:	4a2f      	ldr	r2, [pc, #188]	; (80004e0 <HAL_UART_RxCpltCallback+0x10c>)
 8000424:	6013      	str	r3, [r2, #0]

			if (ret != NULL)
 8000426:	4b2e      	ldr	r3, [pc, #184]	; (80004e0 <HAL_UART_RxCpltCallback+0x10c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d01e      	beq.n	800046c <HAL_UART_RxCpltCallback+0x98>
			{
				printmsg("AT+SEND=0,%d,%s is found\r\n",(strlen(OneMsg)+9),OneMsg);
 800042e:	482b      	ldr	r0, [pc, #172]	; (80004dc <HAL_UART_RxCpltCallback+0x108>)
 8000430:	f7ff fece 	bl	80001d0 <strlen>
 8000434:	4603      	mov	r3, r0
 8000436:	3309      	adds	r3, #9
 8000438:	4a28      	ldr	r2, [pc, #160]	; (80004dc <HAL_UART_RxCpltCallback+0x108>)
 800043a:	4619      	mov	r1, r3
 800043c:	4829      	ldr	r0, [pc, #164]	; (80004e4 <HAL_UART_RxCpltCallback+0x110>)
 800043e:	f7ff ff31 	bl	80002a4 <printmsg>
				if (OrderOfAllMsg==0)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	2b00      	cmp	r3, #0
 8000446:	d103      	bne.n	8000450 <HAL_UART_RxCpltCallback+0x7c>
				{
					printf("Code implementation for Hello!\n");
 8000448:	4827      	ldr	r0, [pc, #156]	; (80004e8 <HAL_UART_RxCpltCallback+0x114>)
 800044a:	f001 fb0d 	bl	8001a68 <puts>
 800044e:	e010      	b.n	8000472 <HAL_UART_RxCpltCallback+0x9e>
				}
				else if (OrderOfAllMsg==1)
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d103      	bne.n	800045e <HAL_UART_RxCpltCallback+0x8a>
				{
					printf("Code implementation for enes\n");
 8000456:	4825      	ldr	r0, [pc, #148]	; (80004ec <HAL_UART_RxCpltCallback+0x118>)
 8000458:	f001 fb06 	bl	8001a68 <puts>
 800045c:	e009      	b.n	8000472 <HAL_UART_RxCpltCallback+0x9e>
				}
				else if (OrderOfAllMsg==2)
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	2b02      	cmp	r3, #2
 8000462:	d106      	bne.n	8000472 <HAL_UART_RxCpltCallback+0x9e>
				{
					printf("Code implementation for goku\n");
 8000464:	4822      	ldr	r0, [pc, #136]	; (80004f0 <HAL_UART_RxCpltCallback+0x11c>)
 8000466:	f001 faff 	bl	8001a68 <puts>
 800046a:	e002      	b.n	8000472 <HAL_UART_RxCpltCallback+0x9e>

			}

			else
			{
				printf("NULL\n");
 800046c:	4821      	ldr	r0, [pc, #132]	; (80004f4 <HAL_UART_RxCpltCallback+0x120>)
 800046e:	f001 fafb 	bl	8001a68 <puts>
		for(int OrderOfAllMsg=0;OrderOfAllMsg<NoOfMsg;OrderOfAllMsg++)
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	3301      	adds	r3, #1
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	2b02      	cmp	r3, #2
 800047c:	ddc4      	ble.n	8000408 <HAL_UART_RxCpltCallback+0x34>
			}

		}

		delay(500000);
 800047e:	481e      	ldr	r0, [pc, #120]	; (80004f8 <HAL_UART_RxCpltCallback+0x124>)
 8000480:	f000 f841 	bl	8000506 <delay>
		delay(500000);
 8000484:	481c      	ldr	r0, [pc, #112]	; (80004f8 <HAL_UART_RxCpltCallback+0x124>)
 8000486:	f000 f83e 	bl	8000506 <delay>
		delay(500000);
 800048a:	481b      	ldr	r0, [pc, #108]	; (80004f8 <HAL_UART_RxCpltCallback+0x124>)
 800048c:	f000 f83b 	bl	8000506 <delay>

		count=0;
 8000490:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <HAL_UART_RxCpltCallback+0xf8>)
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
		control=0;
 8000496:	4b19      	ldr	r3, [pc, #100]	; (80004fc <HAL_UART_RxCpltCallback+0x128>)
 8000498:	2200      	movs	r2, #0
 800049a:	601a      	str	r2, [r3, #0]
		//recvd_data=0;

		memset(&data_buffer,0,sizeof(data_buffer));
 800049c:	2264      	movs	r2, #100	; 0x64
 800049e:	2100      	movs	r1, #0
 80004a0:	480b      	ldr	r0, [pc, #44]	; (80004d0 <HAL_UART_RxCpltCallback+0xfc>)
 80004a2:	f001 fa53 	bl	800194c <memset>
	else
	{
		data_buffer[count++] = recvd_data;
	}

}
 80004a6:	e008      	b.n	80004ba <HAL_UART_RxCpltCallback+0xe6>
		data_buffer[count++] = recvd_data;
 80004a8:	4b08      	ldr	r3, [pc, #32]	; (80004cc <HAL_UART_RxCpltCallback+0xf8>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	1c5a      	adds	r2, r3, #1
 80004ae:	4907      	ldr	r1, [pc, #28]	; (80004cc <HAL_UART_RxCpltCallback+0xf8>)
 80004b0:	600a      	str	r2, [r1, #0]
 80004b2:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <HAL_UART_RxCpltCallback+0xf0>)
 80004b4:	7811      	ldrb	r1, [r2, #0]
 80004b6:	4a06      	ldr	r2, [pc, #24]	; (80004d0 <HAL_UART_RxCpltCallback+0xfc>)
 80004b8:	54d1      	strb	r1, [r2, r3]
}
 80004ba:	bf00      	nop
 80004bc:	3710      	adds	r7, #16
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200000b8 	.word	0x200000b8
 80004c8:	20000090 	.word	0x20000090
 80004cc:	2000008c 	.word	0x2000008c
 80004d0:	200001cc 	.word	0x200001cc
 80004d4:	08002d94 	.word	0x08002d94
 80004d8:	200000a8 	.word	0x200000a8
 80004dc:	20000124 	.word	0x20000124
 80004e0:	200001c8 	.word	0x200001c8
 80004e4:	08002da8 	.word	0x08002da8
 80004e8:	08002dc4 	.word	0x08002dc4
 80004ec:	08002de4 	.word	0x08002de4
 80004f0:	08002e04 	.word	0x08002e04
 80004f4:	08002e24 	.word	0x08002e24
 80004f8:	0007a120 	.word	0x0007a120
 80004fc:	20000094 	.word	0x20000094

08000500 <Error_handler>:


void Error_handler(void)

{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	while(1);
 8000504:	e7fe      	b.n	8000504 <Error_handler+0x4>

08000506 <delay>:
}

void delay(uint32_t number)

{
 8000506:	b480      	push	{r7}
 8000508:	b085      	sub	sp, #20
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
	for (uint32_t i=0;i<number;i++ );
 800050e:	2300      	movs	r3, #0
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	e002      	b.n	800051a <delay+0x14>
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3301      	adds	r3, #1
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fa      	ldr	r2, [r7, #12]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	429a      	cmp	r2, r3
 8000520:	d3f8      	bcc.n	8000514 <delay+0xe>
}
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <HAL_MspInit>:

#include "main.h"


void HAL_MspInit(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
 //Here will do low level processor specific inits.
	//1. Set up the priority grouping of the arm cortex mx processor
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000534:	2003      	movs	r0, #3
 8000536:	f000 f9e3 	bl	8000900 <HAL_NVIC_SetPriorityGrouping>

	//2. Enable the required system exceptions of the arm cortex mx processor
	SCB->SHCSR |= 0x7 << 16; //usage fault, memory fault and bus fault system exceptions
 800053a:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <HAL_MspInit+0x40>)
 800053c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800053e:	4a0c      	ldr	r2, [pc, #48]	; (8000570 <HAL_MspInit+0x40>)
 8000540:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8000544:	6253      	str	r3, [r2, #36]	; 0x24

	//3. configure the priority for the system exceptions
	HAL_NVIC_SetPriority(MemoryManagement_IRQn,0,0);
 8000546:	2200      	movs	r2, #0
 8000548:	2100      	movs	r1, #0
 800054a:	f06f 000b 	mvn.w	r0, #11
 800054e:	f000 f9e2 	bl	8000916 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(BusFault_IRQn,0,0);
 8000552:	2200      	movs	r2, #0
 8000554:	2100      	movs	r1, #0
 8000556:	f06f 000a 	mvn.w	r0, #10
 800055a:	f000 f9dc 	bl	8000916 <HAL_NVIC_SetPriority>
	HAL_NVIC_SetPriority(UsageFault_IRQn,0,0);
 800055e:	2200      	movs	r2, #0
 8000560:	2100      	movs	r1, #0
 8000562:	f06f 0009 	mvn.w	r0, #9
 8000566:	f000 f9d6 	bl	8000916 <HAL_NVIC_SetPriority>
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	e000ed00 	.word	0xe000ed00

08000574 <HAL_UART_MspInit>:


 void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b08a      	sub	sp, #40	; 0x28
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	 GPIO_InitTypeDef gpio_uart;
	 //here we are going to do the low level inits. of the USART2 peripheral

	 //1. enable the clock for the USART2 peripheral as well as for GPIOA peripheral
	 __HAL_RCC_USART2_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <HAL_UART_MspInit+0x88>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a1d      	ldr	r2, [pc, #116]	; (80005fc <HAL_UART_MspInit+0x88>)
 8000586:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <HAL_UART_MspInit+0x88>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	693b      	ldr	r3, [r7, #16]
	 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_UART_MspInit+0x88>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a0:	4a16      	ldr	r2, [pc, #88]	; (80005fc <HAL_UART_MspInit+0x88>)
 80005a2:	f043 0301 	orr.w	r3, r3, #1
 80005a6:	6313      	str	r3, [r2, #48]	; 0x30
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <HAL_UART_MspInit+0x88>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	f003 0301 	and.w	r3, r3, #1
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]

	 //2 . Do the pin muxing configurations
	 gpio_uart.Pin = GPIO_PIN_2;
 80005b4:	2304      	movs	r3, #4
 80005b6:	617b      	str	r3, [r7, #20]
	 gpio_uart.Mode =GPIO_MODE_AF_PP;
 80005b8:	2302      	movs	r3, #2
 80005ba:	61bb      	str	r3, [r7, #24]
	 gpio_uart.Pull = GPIO_PULLUP;
 80005bc:	2301      	movs	r3, #1
 80005be:	61fb      	str	r3, [r7, #28]
	 gpio_uart.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	2300      	movs	r3, #0
 80005c2:	623b      	str	r3, [r7, #32]
	 gpio_uart.Alternate =  GPIO_AF7_USART2; //UART2_TX
 80005c4:	2307      	movs	r3, #7
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4619      	mov	r1, r3
 80005ce:	480c      	ldr	r0, [pc, #48]	; (8000600 <HAL_UART_MspInit+0x8c>)
 80005d0:	f000 fa06 	bl	80009e0 <HAL_GPIO_Init>

	 gpio_uart.Pin = GPIO_PIN_3; //UART2_RX
 80005d4:	2308      	movs	r3, #8
 80005d6:	617b      	str	r3, [r7, #20]
	 HAL_GPIO_Init(GPIOA,&gpio_uart);
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	4619      	mov	r1, r3
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <HAL_UART_MspInit+0x8c>)
 80005e0:	f000 f9fe 	bl	80009e0 <HAL_GPIO_Init>
	 //3 . Enable the IRQ and set up the priority (NVIC settings )
	 HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005e4:	2026      	movs	r0, #38	; 0x26
 80005e6:	f000 f9b2 	bl	800094e <HAL_NVIC_EnableIRQ>
	 HAL_NVIC_SetPriority(USART2_IRQn,15,0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	210f      	movs	r1, #15
 80005ee:	2026      	movs	r0, #38	; 0x26
 80005f0:	f000 f991 	bl	8000916 <HAL_NVIC_SetPriority>

}
 80005f4:	bf00      	nop
 80005f6:	3728      	adds	r7, #40	; 0x28
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40020000 	.word	0x40020000

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <SystemInit+0x20>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800060e:	4a05      	ldr	r2, [pc, #20]	; (8000624 <SystemInit+0x20>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00

08000628 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000628:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000660 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800062c:	480d      	ldr	r0, [pc, #52]	; (8000664 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800062e:	490e      	ldr	r1, [pc, #56]	; (8000668 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000630:	4a0e      	ldr	r2, [pc, #56]	; (800066c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000644:	4c0b      	ldr	r4, [pc, #44]	; (8000674 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000652:	f7ff ffd7 	bl	8000604 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000656:	f001 f955 	bl	8001904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800065a:	f7ff fe65 	bl	8000328 <main>
  bx  lr    
 800065e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000660:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000664:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000668:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800066c:	08002ed4 	.word	0x08002ed4
  ldr r2, =_sbss
 8000670:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000674:	20000244 	.word	0x20000244

08000678 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000678:	e7fe      	b.n	8000678 <ADC_IRQHandler>
	...

0800067c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <HAL_Init+0x40>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a0d      	ldr	r2, [pc, #52]	; (80006bc <HAL_Init+0x40>)
 8000686:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800068a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800068c:	4b0b      	ldr	r3, [pc, #44]	; (80006bc <HAL_Init+0x40>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <HAL_Init+0x40>)
 8000692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000696:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <HAL_Init+0x40>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <HAL_Init+0x40>)
 800069e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 f92b 	bl	8000900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f000 f808 	bl	80006c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006b0:	f7ff ff3e 	bl	8000530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023c00 	.word	0x40023c00

080006c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_InitTick+0x54>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_InitTick+0x58>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006da:	fbb2 f3f3 	udiv	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f943 	bl	800096a <HAL_SYSTICK_Config>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00e      	b.n	800070c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	d80a      	bhi.n	800070a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f4:	2200      	movs	r2, #0
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295
 80006fc:	f000 f90b 	bl	8000916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000700:	4a06      	ldr	r2, [pc, #24]	; (800071c <HAL_InitTick+0x5c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000706:	2300      	movs	r3, #0
 8000708:	e000      	b.n	800070c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800070a:	2301      	movs	r3, #1
}
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000000 	.word	0x20000000
 8000718:	20000008 	.word	0x20000008
 800071c:	20000004 	.word	0x20000004

08000720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_IncTick+0x20>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_IncTick+0x24>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4413      	add	r3, r2
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_IncTick+0x24>)
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000008 	.word	0x20000008
 8000744:	20000230 	.word	0x20000230

08000748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  return uwTick;
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <HAL_GetTick+0x14>)
 800074e:	681b      	ldr	r3, [r3, #0]
}
 8000750:	4618      	mov	r0, r3
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000230 	.word	0x20000230

08000760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800077c:	4013      	ands	r3, r2
 800077e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800078c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000792:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	60d3      	str	r3, [r2, #12]
}
 8000798:	bf00      	nop
 800079a:	3714      	adds	r7, #20
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <__NVIC_GetPriorityGrouping+0x18>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	f003 0307 	and.w	r3, r3, #7
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	db0b      	blt.n	80007ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	f003 021f 	and.w	r2, r3, #31
 80007dc:	4907      	ldr	r1, [pc, #28]	; (80007fc <__NVIC_EnableIRQ+0x38>)
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	095b      	lsrs	r3, r3, #5
 80007e4:	2001      	movs	r0, #1
 80007e6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000e100 	.word	0xe000e100

08000800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000810:	2b00      	cmp	r3, #0
 8000812:	db0a      	blt.n	800082a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	b2da      	uxtb	r2, r3
 8000818:	490c      	ldr	r1, [pc, #48]	; (800084c <__NVIC_SetPriority+0x4c>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	0112      	lsls	r2, r2, #4
 8000820:	b2d2      	uxtb	r2, r2
 8000822:	440b      	add	r3, r1
 8000824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000828:	e00a      	b.n	8000840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	b2da      	uxtb	r2, r3
 800082e:	4908      	ldr	r1, [pc, #32]	; (8000850 <__NVIC_SetPriority+0x50>)
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	3b04      	subs	r3, #4
 8000838:	0112      	lsls	r2, r2, #4
 800083a:	b2d2      	uxtb	r2, r2
 800083c:	440b      	add	r3, r1
 800083e:	761a      	strb	r2, [r3, #24]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	e000e100 	.word	0xe000e100
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000854:	b480      	push	{r7}
 8000856:	b089      	sub	sp, #36	; 0x24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	f1c3 0307 	rsb	r3, r3, #7
 800086e:	2b04      	cmp	r3, #4
 8000870:	bf28      	it	cs
 8000872:	2304      	movcs	r3, #4
 8000874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3304      	adds	r3, #4
 800087a:	2b06      	cmp	r3, #6
 800087c:	d902      	bls.n	8000884 <NVIC_EncodePriority+0x30>
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	3b03      	subs	r3, #3
 8000882:	e000      	b.n	8000886 <NVIC_EncodePriority+0x32>
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	fa02 f303 	lsl.w	r3, r2, r3
 8000892:	43da      	mvns	r2, r3
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	401a      	ands	r2, r3
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	43d9      	mvns	r1, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008ac:	4313      	orrs	r3, r2
         );
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	3724      	adds	r7, #36	; 0x24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	3b01      	subs	r3, #1
 80008c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008cc:	d301      	bcc.n	80008d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00f      	b.n	80008f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008d2:	4a0a      	ldr	r2, [pc, #40]	; (80008fc <SysTick_Config+0x40>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008da:	210f      	movs	r1, #15
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f7ff ff8e 	bl	8000800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008e4:	4b05      	ldr	r3, [pc, #20]	; (80008fc <SysTick_Config+0x40>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ea:	4b04      	ldr	r3, [pc, #16]	; (80008fc <SysTick_Config+0x40>)
 80008ec:	2207      	movs	r2, #7
 80008ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008f0:	2300      	movs	r3, #0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	e000e010 	.word	0xe000e010

08000900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff ff29 	bl	8000760 <__NVIC_SetPriorityGrouping>
}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000916:	b580      	push	{r7, lr}
 8000918:	b086      	sub	sp, #24
 800091a:	af00      	add	r7, sp, #0
 800091c:	4603      	mov	r3, r0
 800091e:	60b9      	str	r1, [r7, #8]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000928:	f7ff ff3e 	bl	80007a8 <__NVIC_GetPriorityGrouping>
 800092c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	68b9      	ldr	r1, [r7, #8]
 8000932:	6978      	ldr	r0, [r7, #20]
 8000934:	f7ff ff8e 	bl	8000854 <NVIC_EncodePriority>
 8000938:	4602      	mov	r2, r0
 800093a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff ff5d 	bl	8000800 <__NVIC_SetPriority>
}
 8000946:	bf00      	nop
 8000948:	3718      	adds	r7, #24
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	b082      	sub	sp, #8
 8000952:	af00      	add	r7, sp, #0
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff31 	bl	80007c4 <__NVIC_EnableIRQ>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ffa2 	bl	80008bc <SysTick_Config>
 8000978:	4603      	mov	r3, r0
}
 800097a:	4618      	mov	r0, r3
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000986:	f000 f802 	bl	800098e <HAL_SYSTICK_Callback>
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}

0800098e <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	2b02      	cmp	r3, #2
 80009ae:	d004      	beq.n	80009ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00c      	b.n	80009d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2205      	movs	r2, #5
 80009be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f022 0201 	bic.w	r2, r2, #1
 80009d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	; 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80009ea:	2300      	movs	r3, #0
 80009ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009f6:	2300      	movs	r3, #0
 80009f8:	61fb      	str	r3, [r7, #28]
 80009fa:	e16b      	b.n	8000cd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80009fc:	2201      	movs	r2, #1
 80009fe:	69fb      	ldr	r3, [r7, #28]
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	697a      	ldr	r2, [r7, #20]
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	f040 815a 	bne.w	8000cce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	f003 0303 	and.w	r3, r3, #3
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d005      	beq.n	8000a32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d130      	bne.n	8000a94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	689b      	ldr	r3, [r3, #8]
 8000a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	2203      	movs	r2, #3
 8000a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a42:	43db      	mvns	r3, r3
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	4013      	ands	r3, r2
 8000a48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	68da      	ldr	r2, [r3, #12]
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a68:	2201      	movs	r2, #1
 8000a6a:	69fb      	ldr	r3, [r7, #28]
 8000a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	091b      	lsrs	r3, r3, #4
 8000a7e:	f003 0201 	and.w	r2, r3, #1
 8000a82:	69fb      	ldr	r3, [r7, #28]
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	69ba      	ldr	r2, [r7, #24]
 8000a92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f003 0303 	and.w	r3, r3, #3
 8000a9c:	2b03      	cmp	r3, #3
 8000a9e:	d017      	beq.n	8000ad0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	68db      	ldr	r3, [r3, #12]
 8000aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	2203      	movs	r2, #3
 8000aac:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	689a      	ldr	r2, [r3, #8]
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	685b      	ldr	r3, [r3, #4]
 8000ad4:	f003 0303 	and.w	r3, r3, #3
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d123      	bne.n	8000b24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	08da      	lsrs	r2, r3, #3
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3208      	adds	r2, #8
 8000ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	220f      	movs	r2, #15
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	43db      	mvns	r3, r3
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	4013      	ands	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	691a      	ldr	r2, [r3, #16]
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	009b      	lsls	r3, r3, #2
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	69ba      	ldr	r2, [r7, #24]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	08da      	lsrs	r2, r3, #3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	3208      	adds	r2, #8
 8000b1e:	69b9      	ldr	r1, [r7, #24]
 8000b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000b2a:	69fb      	ldr	r3, [r7, #28]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	2203      	movs	r2, #3
 8000b30:	fa02 f303 	lsl.w	r3, r2, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4013      	ands	r3, r2
 8000b3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f003 0203 	and.w	r2, r3, #3
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4c:	69ba      	ldr	r2, [r7, #24]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	f000 80b4 	beq.w	8000cce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b60      	ldr	r3, [pc, #384]	; (8000cec <HAL_GPIO_Init+0x30c>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a5f      	ldr	r2, [pc, #380]	; (8000cec <HAL_GPIO_Init+0x30c>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <HAL_GPIO_Init+0x30c>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b82:	4a5b      	ldr	r2, [pc, #364]	; (8000cf0 <HAL_GPIO_Init+0x310>)
 8000b84:	69fb      	ldr	r3, [r7, #28]
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	3302      	adds	r3, #2
 8000b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f003 0303 	and.w	r3, r3, #3
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	220f      	movs	r2, #15
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a52      	ldr	r2, [pc, #328]	; (8000cf4 <HAL_GPIO_Init+0x314>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d02b      	beq.n	8000c06 <HAL_GPIO_Init+0x226>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a51      	ldr	r2, [pc, #324]	; (8000cf8 <HAL_GPIO_Init+0x318>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d025      	beq.n	8000c02 <HAL_GPIO_Init+0x222>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4a50      	ldr	r2, [pc, #320]	; (8000cfc <HAL_GPIO_Init+0x31c>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d01f      	beq.n	8000bfe <HAL_GPIO_Init+0x21e>
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a4f      	ldr	r2, [pc, #316]	; (8000d00 <HAL_GPIO_Init+0x320>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d019      	beq.n	8000bfa <HAL_GPIO_Init+0x21a>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a4e      	ldr	r2, [pc, #312]	; (8000d04 <HAL_GPIO_Init+0x324>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d013      	beq.n	8000bf6 <HAL_GPIO_Init+0x216>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	4a4d      	ldr	r2, [pc, #308]	; (8000d08 <HAL_GPIO_Init+0x328>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d00d      	beq.n	8000bf2 <HAL_GPIO_Init+0x212>
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a4c      	ldr	r2, [pc, #304]	; (8000d0c <HAL_GPIO_Init+0x32c>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d007      	beq.n	8000bee <HAL_GPIO_Init+0x20e>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4a4b      	ldr	r2, [pc, #300]	; (8000d10 <HAL_GPIO_Init+0x330>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d101      	bne.n	8000bea <HAL_GPIO_Init+0x20a>
 8000be6:	2307      	movs	r3, #7
 8000be8:	e00e      	b.n	8000c08 <HAL_GPIO_Init+0x228>
 8000bea:	2308      	movs	r3, #8
 8000bec:	e00c      	b.n	8000c08 <HAL_GPIO_Init+0x228>
 8000bee:	2306      	movs	r3, #6
 8000bf0:	e00a      	b.n	8000c08 <HAL_GPIO_Init+0x228>
 8000bf2:	2305      	movs	r3, #5
 8000bf4:	e008      	b.n	8000c08 <HAL_GPIO_Init+0x228>
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	e006      	b.n	8000c08 <HAL_GPIO_Init+0x228>
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e004      	b.n	8000c08 <HAL_GPIO_Init+0x228>
 8000bfe:	2302      	movs	r3, #2
 8000c00:	e002      	b.n	8000c08 <HAL_GPIO_Init+0x228>
 8000c02:	2301      	movs	r3, #1
 8000c04:	e000      	b.n	8000c08 <HAL_GPIO_Init+0x228>
 8000c06:	2300      	movs	r3, #0
 8000c08:	69fa      	ldr	r2, [r7, #28]
 8000c0a:	f002 0203 	and.w	r2, r2, #3
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	4093      	lsls	r3, r2
 8000c12:	69ba      	ldr	r2, [r7, #24]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c18:	4935      	ldr	r1, [pc, #212]	; (8000cf0 <HAL_GPIO_Init+0x310>)
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	089b      	lsrs	r3, r3, #2
 8000c1e:	3302      	adds	r3, #2
 8000c20:	69ba      	ldr	r2, [r7, #24]
 8000c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c26:	4b3b      	ldr	r3, [pc, #236]	; (8000d14 <HAL_GPIO_Init+0x334>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4013      	ands	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	693b      	ldr	r3, [r7, #16]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c4a:	4a32      	ldr	r2, [pc, #200]	; (8000d14 <HAL_GPIO_Init+0x334>)
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c50:	4b30      	ldr	r3, [pc, #192]	; (8000d14 <HAL_GPIO_Init+0x334>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c56:	693b      	ldr	r3, [r7, #16]
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d003      	beq.n	8000c74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c74:	4a27      	ldr	r2, [pc, #156]	; (8000d14 <HAL_GPIO_Init+0x334>)
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c7a:	4b26      	ldr	r3, [pc, #152]	; (8000d14 <HAL_GPIO_Init+0x334>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	43db      	mvns	r3, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4013      	ands	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000c9e:	4a1d      	ldr	r2, [pc, #116]	; (8000d14 <HAL_GPIO_Init+0x334>)
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <HAL_GPIO_Init+0x334>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	43db      	mvns	r3, r3
 8000cae:	69ba      	ldr	r2, [r7, #24]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d003      	beq.n	8000cc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	693b      	ldr	r3, [r7, #16]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000cc8:	4a12      	ldr	r2, [pc, #72]	; (8000d14 <HAL_GPIO_Init+0x334>)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	61fb      	str	r3, [r7, #28]
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	2b0f      	cmp	r3, #15
 8000cd8:	f67f ae90 	bls.w	80009fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3724      	adds	r7, #36	; 0x24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40013800 	.word	0x40013800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	40020800 	.word	0x40020800
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40021400 	.word	0x40021400
 8000d0c:	40021800 	.word	0x40021800
 8000d10:	40021c00 	.word	0x40021c00
 8000d14:	40013c00 	.word	0x40013c00

08000d18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d1c:	4b03      	ldr	r3, [pc, #12]	; (8000d2c <HAL_RCC_GetHCLKFreq+0x14>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	4618      	mov	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	20000000 	.word	0x20000000

08000d30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d34:	f7ff fff0 	bl	8000d18 <HAL_RCC_GetHCLKFreq>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	0a9b      	lsrs	r3, r3, #10
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	4903      	ldr	r1, [pc, #12]	; (8000d54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d46:	5ccb      	ldrb	r3, [r1, r3]
 8000d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	08002e2c 	.word	0x08002e2c

08000d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000d5c:	f7ff ffdc 	bl	8000d18 <HAL_RCC_GetHCLKFreq>
 8000d60:	4602      	mov	r2, r0
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	0b5b      	lsrs	r3, r3, #13
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	4903      	ldr	r1, [pc, #12]	; (8000d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d6e:	5ccb      	ldrb	r3, [r1, r3]
 8000d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	08002e2c 	.word	0x08002e2c

08000d80 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d101      	bne.n	8000d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e03f      	b.n	8000e12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d106      	bne.n	8000dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff fbe4 	bl	8000574 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2224      	movs	r2, #36	; 0x24
 8000db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68da      	ldr	r2, [r3, #12]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f000 fb81 	bl	80014cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	691a      	ldr	r2, [r3, #16]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	695a      	ldr	r2, [r3, #20]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2220      	movs	r2, #32
 8000e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2220      	movs	r2, #32
 8000e0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b088      	sub	sp, #32
 8000e1e:	af02      	add	r7, sp, #8
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	4613      	mov	r3, r2
 8000e28:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b20      	cmp	r3, #32
 8000e38:	f040 8083 	bne.w	8000f42 <HAL_UART_Transmit+0x128>
  {
    if((pData == NULL ) || (Size == 0))
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d002      	beq.n	8000e48 <HAL_UART_Transmit+0x2e>
 8000e42:	88fb      	ldrh	r3, [r7, #6]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d101      	bne.n	8000e4c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e07b      	b.n	8000f44 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d101      	bne.n	8000e5a <HAL_UART_Transmit+0x40>
 8000e56:	2302      	movs	r3, #2
 8000e58:	e074      	b.n	8000f44 <HAL_UART_Transmit+0x12a>
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2200      	movs	r2, #0
 8000e66:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	2221      	movs	r2, #33	; 0x21
 8000e6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000e70:	f7ff fc6a 	bl	8000748 <HAL_GetTick>
 8000e74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	88fa      	ldrh	r2, [r7, #6]
 8000e7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	88fa      	ldrh	r2, [r7, #6]
 8000e80:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000e82:	e042      	b.n	8000f0a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e9a:	d122      	bne.n	8000ee2 <HAL_UART_Transmit+0xc8>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2180      	movs	r1, #128	; 0x80
 8000ea6:	68f8      	ldr	r0, [r7, #12]
 8000ea8:	f000 f9ac 	bl	8001204 <UART_WaitOnFlagUntilTimeout>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e046      	b.n	8000f44 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t*) pData;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ec8:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	691b      	ldr	r3, [r3, #16]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d103      	bne.n	8000eda <HAL_UART_Transmit+0xc0>
        {
          pData +=2U;
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	e017      	b.n	8000f0a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData +=1U;
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	3301      	adds	r3, #1
 8000ede:	60bb      	str	r3, [r7, #8]
 8000ee0:	e013      	b.n	8000f0a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	9300      	str	r3, [sp, #0]
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2180      	movs	r1, #128	; 0x80
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f000 f989 	bl	8001204 <UART_WaitOnFlagUntilTimeout>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	e023      	b.n	8000f44 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	1c5a      	adds	r2, r3, #1
 8000f00:	60ba      	str	r2, [r7, #8]
 8000f02:	781a      	ldrb	r2, [r3, #0]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1b7      	bne.n	8000e84 <HAL_UART_Transmit+0x6a>
      }
    }

    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2140      	movs	r1, #64	; 0x40
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f000 f970 	bl	8001204 <UART_WaitOnFlagUntilTimeout>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e00a      	b.n	8000f44 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	2220      	movs	r2, #32
 8000f32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	e000      	b.n	8000f44 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8000f42:	2302      	movs	r3, #2
  }
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	4613      	mov	r3, r2
 8000f58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	2b20      	cmp	r3, #32
 8000f64:	d138      	bne.n	8000fd8 <HAL_UART_Receive_IT+0x8c>
  {
    if((pData == NULL ) || (Size == 0))
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <HAL_UART_Receive_IT+0x26>
 8000f6c:	88fb      	ldrh	r3, [r7, #6]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e031      	b.n	8000fda <HAL_UART_Receive_IT+0x8e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d101      	bne.n	8000f84 <HAL_UART_Receive_IT+0x38>
 8000f80:	2302      	movs	r3, #2
 8000f82:	e02a      	b.n	8000fda <HAL_UART_Receive_IT+0x8e>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	68ba      	ldr	r2, [r7, #8]
 8000f90:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	88fa      	ldrh	r2, [r7, #6]
 8000f96:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	88fa      	ldrh	r2, [r7, #6]
 8000f9c:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2222      	movs	r2, #34	; 0x22
 8000fa8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	695a      	ldr	r2, [r3, #20]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0201 	orr.w	r2, r2, #1
 8000fc2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8000fd2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	e000      	b.n	8000fda <HAL_UART_Receive_IT+0x8e>
  }
  else
  {
    return HAL_BUSY;
 8000fd8:	2302      	movs	r3, #2
  }
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <HAL_UART_IRQHandler>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	61fb      	str	r3, [r7, #28]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	61bb      	str	r3, [r7, #24]
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	617b      	str	r3, [r7, #20]
   uint32_t errorflags = 0x00U;
 8001008:	2300      	movs	r3, #0
 800100a:	613b      	str	r3, [r7, #16]
   uint32_t dmarequest = 0x00U;
 800100c:	2300      	movs	r3, #0
 800100e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	613b      	str	r3, [r7, #16]
  if(errorflags == RESET)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10d      	bne.n	800103a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	f003 0320 	and.w	r3, r3, #32
 8001024:	2b00      	cmp	r3, #0
 8001026:	d008      	beq.n	800103a <HAL_UART_IRQHandler+0x52>
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	f003 0320 	and.w	r3, r3, #32
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 f9d0 	bl	80013d8 <UART_Receive_IT>
      return;
 8001038:	e0cb      	b.n	80011d2 <HAL_UART_IRQHandler+0x1ea>
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	2b00      	cmp	r3, #0
 800103e:	f000 80ab 	beq.w	8001198 <HAL_UART_IRQHandler+0x1b0>
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f003 0301 	and.w	r3, r3, #1
 8001048:	2b00      	cmp	r3, #0
 800104a:	d105      	bne.n	8001058 <HAL_UART_IRQHandler+0x70>
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001052:	2b00      	cmp	r3, #0
 8001054:	f000 80a0 	beq.w	8001198 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	2b00      	cmp	r3, #0
 8001060:	d00a      	beq.n	8001078 <HAL_UART_IRQHandler+0x90>
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001070:	f043 0201 	orr.w	r2, r3, #1
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00a      	beq.n	8001098 <HAL_UART_IRQHandler+0xb0>
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001090:	f043 0202 	orr.w	r2, r3, #2
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00a      	beq.n	80010b8 <HAL_UART_IRQHandler+0xd0>
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010b0:	f043 0204 	orr.w	r2, r3, #4
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d00a      	beq.n	80010d8 <HAL_UART_IRQHandler+0xf0>
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010d0:	f043 0208 	orr.w	r2, r3, #8
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d077      	beq.n	80011d0 <HAL_UART_IRQHandler+0x1e8>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d007      	beq.n	80010fa <HAL_UART_IRQHandler+0x112>
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	f003 0320 	and.w	r3, r3, #32
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 f96f 	bl	80013d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001104:	2b40      	cmp	r3, #64	; 0x40
 8001106:	bf0c      	ite	eq
 8001108:	2301      	moveq	r3, #1
 800110a:	2300      	movne	r3, #0
 800110c:	b2db      	uxtb	r3, r3
 800110e:	60fb      	str	r3, [r7, #12]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001114:	f003 0308 	and.w	r3, r3, #8
 8001118:	2b00      	cmp	r3, #0
 800111a:	d102      	bne.n	8001122 <HAL_UART_IRQHandler+0x13a>
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d031      	beq.n	8001186 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f8b8 	bl	8001298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001132:	2b40      	cmp	r3, #64	; 0x40
 8001134:	d123      	bne.n	800117e <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	695a      	ldr	r2, [r3, #20]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001144:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114a:	2b00      	cmp	r3, #0
 800114c:	d013      	beq.n	8001176 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001152:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_UART_IRQHandler+0x1f0>)
 8001154:	651a      	str	r2, [r3, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff fc1e 	bl	800099c <HAL_DMA_Abort_IT>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d016      	beq.n	8001194 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800116a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001170:	4610      	mov	r0, r2
 8001172:	4798      	blx	r3
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001174:	e00e      	b.n	8001194 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f83a 	bl	80011f0 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800117c:	e00a      	b.n	8001194 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f000 f836 	bl	80011f0 <HAL_UART_ErrorCallback>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001184:	e006      	b.n	8001194 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f832 	bl	80011f0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001192:	e01d      	b.n	80011d0 <HAL_UART_IRQHandler+0x1e8>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001194:	bf00      	nop
    return;
 8001196:	e01b      	b.n	80011d0 <HAL_UART_IRQHandler+0x1e8>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d008      	beq.n	80011b4 <HAL_UART_IRQHandler+0x1cc>
 80011a2:	69bb      	ldr	r3, [r7, #24]
 80011a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f000 f8a5 	bl	80012fc <UART_Transmit_IT>
    return;
 80011b2:	e00e      	b.n	80011d2 <HAL_UART_IRQHandler+0x1ea>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d009      	beq.n	80011d2 <HAL_UART_IRQHandler+0x1ea>
 80011be:	69bb      	ldr	r3, [r7, #24]
 80011c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d004      	beq.n	80011d2 <HAL_UART_IRQHandler+0x1ea>
  {
    UART_EndTransmit_IT(huart);
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f8ed 	bl	80013a8 <UART_EndTransmit_IT>
    return;
 80011ce:	e000      	b.n	80011d2 <HAL_UART_IRQHandler+0x1ea>
    return;
 80011d0:	bf00      	nop
  }
}
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	080012d5 	.word	0x080012d5

080011dc <HAL_UART_TxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	4613      	mov	r3, r2
 8001212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001214:	e02c      	b.n	8001270 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800121c:	d028      	beq.n	8001270 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d007      	beq.n	8001234 <UART_WaitOnFlagUntilTimeout+0x30>
 8001224:	f7ff fa90 	bl	8000748 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	429a      	cmp	r2, r3
 8001232:	d21d      	bcs.n	8001270 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001242:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f022 0201 	bic.w	r2, r2, #1
 8001252:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2220      	movs	r2, #32
 8001258:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2220      	movs	r2, #32
 8001260:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e00f      	b.n	8001290 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	4013      	ands	r3, r2
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	429a      	cmp	r2, r3
 800127e:	bf0c      	ite	eq
 8001280:	2301      	moveq	r3, #1
 8001282:	2300      	movne	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	461a      	mov	r2, r3
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	429a      	cmp	r2, r3
 800128c:	d0c3      	beq.n	8001216 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	68da      	ldr	r2, [r3, #12]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80012ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	695a      	ldr	r2, [r3, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0201 	bic.w	r2, r2, #1
 80012be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2220      	movs	r2, #32
 80012c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0U;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2200      	movs	r2, #0
 80012ec:	84da      	strh	r2, [r3, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f7ff ff7e 	bl	80011f0 <HAL_UART_ErrorCallback>
}
 80012f4:	bf00      	nop
 80012f6:	3710      	adds	r7, #16
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <UART_Transmit_IT>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800130a:	b2db      	uxtb	r3, r3
 800130c:	2b21      	cmp	r3, #33	; 0x21
 800130e:	d144      	bne.n	800139a <UART_Transmit_IT+0x9e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001318:	d11a      	bne.n	8001350 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800132e:	605a      	str	r2, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d105      	bne.n	8001344 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	1c9a      	adds	r2, r3, #2
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	621a      	str	r2, [r3, #32]
 8001342:	e00e      	b.n	8001362 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1b      	ldr	r3, [r3, #32]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	621a      	str	r2, [r3, #32]
 800134e:	e008      	b.n	8001362 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	1c59      	adds	r1, r3, #1
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	6211      	str	r1, [r2, #32]
 800135a:	781a      	ldrb	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001366:	b29b      	uxth	r3, r3
 8001368:	3b01      	subs	r3, #1
 800136a:	b29b      	uxth	r3, r3
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4619      	mov	r1, r3
 8001370:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001384:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	68da      	ldr	r2, [r3, #12]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001394:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001396:	2300      	movs	r3, #0
 8001398:	e000      	b.n	800139c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800139a:	2302      	movs	r3, #2
  }
}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2220      	movs	r2, #32
 80013c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  HAL_UART_TxCpltCallback(huart);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff07 	bl	80011dc <HAL_UART_TxCpltCallback>

  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <UART_Receive_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	2b22      	cmp	r3, #34	; 0x22
 80013ea:	d169      	bne.n	80014c0 <UART_Receive_IT+0xe8>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013f4:	d123      	bne.n	800143e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	60fb      	str	r3, [r7, #12]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10e      	bne.n	8001422 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	b29b      	uxth	r3, r3
 800140c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001410:	b29a      	uxth	r2, r3
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141a:	1c9a      	adds	r2, r3, #2
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28
 8001420:	e029      	b.n	8001476 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	b29b      	uxth	r3, r3
 800142a:	b2db      	uxtb	r3, r3
 800142c:	b29a      	uxth	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001436:	1c5a      	adds	r2, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
 800143c:	e01b      	b.n	8001476 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10a      	bne.n	800145c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6858      	ldr	r0, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001450:	1c59      	adds	r1, r3, #1
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	6291      	str	r1, [r2, #40]	; 0x28
 8001456:	b2c2      	uxtb	r2, r0
 8001458:	701a      	strb	r2, [r3, #0]
 800145a:	e00c      	b.n	8001476 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	b2da      	uxtb	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001468:	1c58      	adds	r0, r3, #1
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	6288      	str	r0, [r1, #40]	; 0x28
 800146e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800147a:	b29b      	uxth	r3, r3
 800147c:	3b01      	subs	r3, #1
 800147e:	b29b      	uxth	r3, r3
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	4619      	mov	r1, r3
 8001484:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001486:	2b00      	cmp	r3, #0
 8001488:	d118      	bne.n	80014bc <UART_Receive_IT+0xe4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001498:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	695a      	ldr	r2, [r3, #20]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0201 	bic.w	r2, r2, #1
 80014a8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2220      	movs	r2, #32
 80014ae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

      HAL_UART_RxCpltCallback(huart);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7fe ff8e 	bl	80003d4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	e002      	b.n	80014c2 <UART_Receive_IT+0xea>
    }
    return HAL_OK;
 80014bc:	2300      	movs	r3, #0
 80014be:	e000      	b.n	80014c2 <UART_Receive_IT+0xea>
  }
  else
  {
    return HAL_BUSY;
 80014c0:	2302      	movs	r3, #2
  }
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80014cc:	b5b0      	push	{r4, r5, r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80014e6:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4313      	orrs	r3, r2
 80014f0:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001508:	f023 030c 	bic.w	r3, r3, #12
 800150c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode:
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4313      	orrs	r3, r2
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4313      	orrs	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = huart->Instance->CR3;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	60fb      	str	r3, [r7, #12]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001540:	60fb      	str	r3, [r7, #12]

  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4313      	orrs	r3, r2
 800154a:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800155c:	f040 80e4 	bne.w	8001728 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4aab      	ldr	r2, [pc, #684]	; (8001814 <UART_SetConfig+0x348>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d004      	beq.n	8001574 <UART_SetConfig+0xa8>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4aaa      	ldr	r2, [pc, #680]	; (8001818 <UART_SetConfig+0x34c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d16c      	bne.n	800164e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001574:	f7ff fbf0 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
 8001578:	4602      	mov	r2, r0
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	009a      	lsls	r2, r3, #2
 8001582:	441a      	add	r2, r3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fbb2 f3f3 	udiv	r3, r2, r3
 800158e:	4aa3      	ldr	r2, [pc, #652]	; (800181c <UART_SetConfig+0x350>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	095b      	lsrs	r3, r3, #5
 8001596:	011c      	lsls	r4, r3, #4
 8001598:	f7ff fbde 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
 800159c:	4602      	mov	r2, r0
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	009a      	lsls	r2, r3, #2
 80015a6:	441a      	add	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fbb2 f5f3 	udiv	r5, r2, r3
 80015b2:	f7ff fbd1 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
 80015b6:	4602      	mov	r2, r0
 80015b8:	4613      	mov	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	009a      	lsls	r2, r3, #2
 80015c0:	441a      	add	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80015cc:	4a93      	ldr	r2, [pc, #588]	; (800181c <UART_SetConfig+0x350>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	095b      	lsrs	r3, r3, #5
 80015d4:	2264      	movs	r2, #100	; 0x64
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	1aeb      	subs	r3, r5, r3
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	3332      	adds	r3, #50	; 0x32
 80015e0:	4a8e      	ldr	r2, [pc, #568]	; (800181c <UART_SetConfig+0x350>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80015ee:	441c      	add	r4, r3
 80015f0:	f7ff fbb2 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4613      	mov	r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	4413      	add	r3, r2
 80015fc:	009a      	lsls	r2, r3, #2
 80015fe:	441a      	add	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fbb2 f5f3 	udiv	r5, r2, r3
 800160a:	f7ff fba5 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
 800160e:	4602      	mov	r2, r0
 8001610:	4613      	mov	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4413      	add	r3, r2
 8001616:	009a      	lsls	r2, r3, #2
 8001618:	441a      	add	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fbb2 f3f3 	udiv	r3, r2, r3
 8001624:	4a7d      	ldr	r2, [pc, #500]	; (800181c <UART_SetConfig+0x350>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2264      	movs	r2, #100	; 0x64
 800162e:	fb02 f303 	mul.w	r3, r2, r3
 8001632:	1aeb      	subs	r3, r5, r3
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	3332      	adds	r3, #50	; 0x32
 8001638:	4a78      	ldr	r2, [pc, #480]	; (800181c <UART_SetConfig+0x350>)
 800163a:	fba2 2303 	umull	r2, r3, r2, r3
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	f003 0207 	and.w	r2, r3, #7
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4422      	add	r2, r4
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	e154      	b.n	80018f8 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800164e:	f7ff fb6f 	bl	8000d30 <HAL_RCC_GetPCLK1Freq>
 8001652:	4602      	mov	r2, r0
 8001654:	4613      	mov	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	4413      	add	r3, r2
 800165a:	009a      	lsls	r2, r3, #2
 800165c:	441a      	add	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	fbb2 f3f3 	udiv	r3, r2, r3
 8001668:	4a6c      	ldr	r2, [pc, #432]	; (800181c <UART_SetConfig+0x350>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	095b      	lsrs	r3, r3, #5
 8001670:	011c      	lsls	r4, r3, #4
 8001672:	f7ff fb5d 	bl	8000d30 <HAL_RCC_GetPCLK1Freq>
 8001676:	4602      	mov	r2, r0
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	009a      	lsls	r2, r3, #2
 8001680:	441a      	add	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fbb2 f5f3 	udiv	r5, r2, r3
 800168c:	f7ff fb50 	bl	8000d30 <HAL_RCC_GetPCLK1Freq>
 8001690:	4602      	mov	r2, r0
 8001692:	4613      	mov	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4413      	add	r3, r2
 8001698:	009a      	lsls	r2, r3, #2
 800169a:	441a      	add	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4a5d      	ldr	r2, [pc, #372]	; (800181c <UART_SetConfig+0x350>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	095b      	lsrs	r3, r3, #5
 80016ae:	2264      	movs	r2, #100	; 0x64
 80016b0:	fb02 f303 	mul.w	r3, r2, r3
 80016b4:	1aeb      	subs	r3, r5, r3
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	3332      	adds	r3, #50	; 0x32
 80016ba:	4a58      	ldr	r2, [pc, #352]	; (800181c <UART_SetConfig+0x350>)
 80016bc:	fba2 2303 	umull	r2, r3, r2, r3
 80016c0:	095b      	lsrs	r3, r3, #5
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80016c8:	441c      	add	r4, r3
 80016ca:	f7ff fb31 	bl	8000d30 <HAL_RCC_GetPCLK1Freq>
 80016ce:	4602      	mov	r2, r0
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	009a      	lsls	r2, r3, #2
 80016d8:	441a      	add	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fbb2 f5f3 	udiv	r5, r2, r3
 80016e4:	f7ff fb24 	bl	8000d30 <HAL_RCC_GetPCLK1Freq>
 80016e8:	4602      	mov	r2, r0
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	009a      	lsls	r2, r3, #2
 80016f2:	441a      	add	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	4a47      	ldr	r2, [pc, #284]	; (800181c <UART_SetConfig+0x350>)
 8001700:	fba2 2303 	umull	r2, r3, r2, r3
 8001704:	095b      	lsrs	r3, r3, #5
 8001706:	2264      	movs	r2, #100	; 0x64
 8001708:	fb02 f303 	mul.w	r3, r2, r3
 800170c:	1aeb      	subs	r3, r5, r3
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	3332      	adds	r3, #50	; 0x32
 8001712:	4a42      	ldr	r2, [pc, #264]	; (800181c <UART_SetConfig+0x350>)
 8001714:	fba2 2303 	umull	r2, r3, r2, r3
 8001718:	095b      	lsrs	r3, r3, #5
 800171a:	f003 0207 	and.w	r2, r3, #7
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4422      	add	r2, r4
 8001724:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8001726:	e0e7      	b.n	80018f8 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a39      	ldr	r2, [pc, #228]	; (8001814 <UART_SetConfig+0x348>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d004      	beq.n	800173c <UART_SetConfig+0x270>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a38      	ldr	r2, [pc, #224]	; (8001818 <UART_SetConfig+0x34c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d171      	bne.n	8001820 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800173c:	f7ff fb0c 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
 8001740:	4602      	mov	r2, r0
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	009a      	lsls	r2, r3, #2
 800174a:	441a      	add	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	fbb2 f3f3 	udiv	r3, r2, r3
 8001756:	4a31      	ldr	r2, [pc, #196]	; (800181c <UART_SetConfig+0x350>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	095b      	lsrs	r3, r3, #5
 800175e:	011c      	lsls	r4, r3, #4
 8001760:	f7ff fafa 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
 8001764:	4602      	mov	r2, r0
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	009a      	lsls	r2, r3, #2
 800176e:	441a      	add	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	fbb2 f5f3 	udiv	r5, r2, r3
 800177a:	f7ff faed 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
 800177e:	4602      	mov	r2, r0
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	009a      	lsls	r2, r3, #2
 8001788:	441a      	add	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	fbb2 f3f3 	udiv	r3, r2, r3
 8001794:	4a21      	ldr	r2, [pc, #132]	; (800181c <UART_SetConfig+0x350>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	095b      	lsrs	r3, r3, #5
 800179c:	2264      	movs	r2, #100	; 0x64
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	1aeb      	subs	r3, r5, r3
 80017a4:	011b      	lsls	r3, r3, #4
 80017a6:	3332      	adds	r3, #50	; 0x32
 80017a8:	4a1c      	ldr	r2, [pc, #112]	; (800181c <UART_SetConfig+0x350>)
 80017aa:	fba2 2303 	umull	r2, r3, r2, r3
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b4:	441c      	add	r4, r3
 80017b6:	f7ff facf 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	009a      	lsls	r2, r3, #2
 80017c4:	441a      	add	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	fbb2 f5f3 	udiv	r5, r2, r3
 80017d0:	f7ff fac2 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
 80017d4:	4602      	mov	r2, r0
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	009a      	lsls	r2, r3, #2
 80017de:	441a      	add	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ea:	4a0c      	ldr	r2, [pc, #48]	; (800181c <UART_SetConfig+0x350>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	095b      	lsrs	r3, r3, #5
 80017f2:	2264      	movs	r2, #100	; 0x64
 80017f4:	fb02 f303 	mul.w	r3, r2, r3
 80017f8:	1aeb      	subs	r3, r5, r3
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	3332      	adds	r3, #50	; 0x32
 80017fe:	4a07      	ldr	r2, [pc, #28]	; (800181c <UART_SetConfig+0x350>)
 8001800:	fba2 2303 	umull	r2, r3, r2, r3
 8001804:	095b      	lsrs	r3, r3, #5
 8001806:	f003 020f 	and.w	r2, r3, #15
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4422      	add	r2, r4
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	e071      	b.n	80018f8 <UART_SetConfig+0x42c>
 8001814:	40011000 	.word	0x40011000
 8001818:	40011400 	.word	0x40011400
 800181c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001820:	f7ff fa86 	bl	8000d30 <HAL_RCC_GetPCLK1Freq>
 8001824:	4602      	mov	r2, r0
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	009a      	lsls	r2, r3, #2
 800182e:	441a      	add	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4a31      	ldr	r2, [pc, #196]	; (8001900 <UART_SetConfig+0x434>)
 800183c:	fba2 2303 	umull	r2, r3, r2, r3
 8001840:	095b      	lsrs	r3, r3, #5
 8001842:	011c      	lsls	r4, r3, #4
 8001844:	f7ff fa74 	bl	8000d30 <HAL_RCC_GetPCLK1Freq>
 8001848:	4602      	mov	r2, r0
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	009a      	lsls	r2, r3, #2
 8001852:	441a      	add	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	fbb2 f5f3 	udiv	r5, r2, r3
 800185e:	f7ff fa67 	bl	8000d30 <HAL_RCC_GetPCLK1Freq>
 8001862:	4602      	mov	r2, r0
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	009a      	lsls	r2, r3, #2
 800186c:	441a      	add	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	fbb2 f3f3 	udiv	r3, r2, r3
 8001878:	4a21      	ldr	r2, [pc, #132]	; (8001900 <UART_SetConfig+0x434>)
 800187a:	fba2 2303 	umull	r2, r3, r2, r3
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2264      	movs	r2, #100	; 0x64
 8001882:	fb02 f303 	mul.w	r3, r2, r3
 8001886:	1aeb      	subs	r3, r5, r3
 8001888:	011b      	lsls	r3, r3, #4
 800188a:	3332      	adds	r3, #50	; 0x32
 800188c:	4a1c      	ldr	r2, [pc, #112]	; (8001900 <UART_SetConfig+0x434>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	095b      	lsrs	r3, r3, #5
 8001894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001898:	441c      	add	r4, r3
 800189a:	f7ff fa49 	bl	8000d30 <HAL_RCC_GetPCLK1Freq>
 800189e:	4602      	mov	r2, r0
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	009a      	lsls	r2, r3, #2
 80018a8:	441a      	add	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	fbb2 f5f3 	udiv	r5, r2, r3
 80018b4:	f7ff fa3c 	bl	8000d30 <HAL_RCC_GetPCLK1Freq>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	009a      	lsls	r2, r3, #2
 80018c2:	441a      	add	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	4a0c      	ldr	r2, [pc, #48]	; (8001900 <UART_SetConfig+0x434>)
 80018d0:	fba2 2303 	umull	r2, r3, r2, r3
 80018d4:	095b      	lsrs	r3, r3, #5
 80018d6:	2264      	movs	r2, #100	; 0x64
 80018d8:	fb02 f303 	mul.w	r3, r2, r3
 80018dc:	1aeb      	subs	r3, r5, r3
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	3332      	adds	r3, #50	; 0x32
 80018e2:	4a07      	ldr	r2, [pc, #28]	; (8001900 <UART_SetConfig+0x434>)
 80018e4:	fba2 2303 	umull	r2, r3, r2, r3
 80018e8:	095b      	lsrs	r3, r3, #5
 80018ea:	f003 020f 	and.w	r2, r3, #15
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4422      	add	r2, r4
 80018f4:	609a      	str	r2, [r3, #8]
}
 80018f6:	e7ff      	b.n	80018f8 <UART_SetConfig+0x42c>
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001900:	51eb851f 	.word	0x51eb851f

08001904 <__libc_init_array>:
 8001904:	b570      	push	{r4, r5, r6, lr}
 8001906:	4d0d      	ldr	r5, [pc, #52]	; (800193c <__libc_init_array+0x38>)
 8001908:	4c0d      	ldr	r4, [pc, #52]	; (8001940 <__libc_init_array+0x3c>)
 800190a:	1b64      	subs	r4, r4, r5
 800190c:	10a4      	asrs	r4, r4, #2
 800190e:	2600      	movs	r6, #0
 8001910:	42a6      	cmp	r6, r4
 8001912:	d109      	bne.n	8001928 <__libc_init_array+0x24>
 8001914:	4d0b      	ldr	r5, [pc, #44]	; (8001944 <__libc_init_array+0x40>)
 8001916:	4c0c      	ldr	r4, [pc, #48]	; (8001948 <__libc_init_array+0x44>)
 8001918:	f001 fa1c 	bl	8002d54 <_init>
 800191c:	1b64      	subs	r4, r4, r5
 800191e:	10a4      	asrs	r4, r4, #2
 8001920:	2600      	movs	r6, #0
 8001922:	42a6      	cmp	r6, r4
 8001924:	d105      	bne.n	8001932 <__libc_init_array+0x2e>
 8001926:	bd70      	pop	{r4, r5, r6, pc}
 8001928:	f855 3b04 	ldr.w	r3, [r5], #4
 800192c:	4798      	blx	r3
 800192e:	3601      	adds	r6, #1
 8001930:	e7ee      	b.n	8001910 <__libc_init_array+0xc>
 8001932:	f855 3b04 	ldr.w	r3, [r5], #4
 8001936:	4798      	blx	r3
 8001938:	3601      	adds	r6, #1
 800193a:	e7f2      	b.n	8001922 <__libc_init_array+0x1e>
 800193c:	08002ecc 	.word	0x08002ecc
 8001940:	08002ecc 	.word	0x08002ecc
 8001944:	08002ecc 	.word	0x08002ecc
 8001948:	08002ed0 	.word	0x08002ed0

0800194c <memset>:
 800194c:	4402      	add	r2, r0
 800194e:	4603      	mov	r3, r0
 8001950:	4293      	cmp	r3, r2
 8001952:	d100      	bne.n	8001956 <memset+0xa>
 8001954:	4770      	bx	lr
 8001956:	f803 1b01 	strb.w	r1, [r3], #1
 800195a:	e7f9      	b.n	8001950 <memset+0x4>

0800195c <iprintf>:
 800195c:	b40f      	push	{r0, r1, r2, r3}
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <iprintf+0x2c>)
 8001960:	b513      	push	{r0, r1, r4, lr}
 8001962:	681c      	ldr	r4, [r3, #0]
 8001964:	b124      	cbz	r4, 8001970 <iprintf+0x14>
 8001966:	69a3      	ldr	r3, [r4, #24]
 8001968:	b913      	cbnz	r3, 8001970 <iprintf+0x14>
 800196a:	4620      	mov	r0, r4
 800196c:	f000 fa9e 	bl	8001eac <__sinit>
 8001970:	ab05      	add	r3, sp, #20
 8001972:	9a04      	ldr	r2, [sp, #16]
 8001974:	68a1      	ldr	r1, [r4, #8]
 8001976:	9301      	str	r3, [sp, #4]
 8001978:	4620      	mov	r0, r4
 800197a:	f000 fdcb 	bl	8002514 <_vfiprintf_r>
 800197e:	b002      	add	sp, #8
 8001980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001984:	b004      	add	sp, #16
 8001986:	4770      	bx	lr
 8001988:	2000000c 	.word	0x2000000c

0800198c <_puts_r>:
 800198c:	b570      	push	{r4, r5, r6, lr}
 800198e:	460e      	mov	r6, r1
 8001990:	4605      	mov	r5, r0
 8001992:	b118      	cbz	r0, 800199c <_puts_r+0x10>
 8001994:	6983      	ldr	r3, [r0, #24]
 8001996:	b90b      	cbnz	r3, 800199c <_puts_r+0x10>
 8001998:	f000 fa88 	bl	8001eac <__sinit>
 800199c:	69ab      	ldr	r3, [r5, #24]
 800199e:	68ac      	ldr	r4, [r5, #8]
 80019a0:	b913      	cbnz	r3, 80019a8 <_puts_r+0x1c>
 80019a2:	4628      	mov	r0, r5
 80019a4:	f000 fa82 	bl	8001eac <__sinit>
 80019a8:	4b2c      	ldr	r3, [pc, #176]	; (8001a5c <_puts_r+0xd0>)
 80019aa:	429c      	cmp	r4, r3
 80019ac:	d120      	bne.n	80019f0 <_puts_r+0x64>
 80019ae:	686c      	ldr	r4, [r5, #4]
 80019b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019b2:	07db      	lsls	r3, r3, #31
 80019b4:	d405      	bmi.n	80019c2 <_puts_r+0x36>
 80019b6:	89a3      	ldrh	r3, [r4, #12]
 80019b8:	0598      	lsls	r0, r3, #22
 80019ba:	d402      	bmi.n	80019c2 <_puts_r+0x36>
 80019bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019be:	f000 fb13 	bl	8001fe8 <__retarget_lock_acquire_recursive>
 80019c2:	89a3      	ldrh	r3, [r4, #12]
 80019c4:	0719      	lsls	r1, r3, #28
 80019c6:	d51d      	bpl.n	8001a04 <_puts_r+0x78>
 80019c8:	6923      	ldr	r3, [r4, #16]
 80019ca:	b1db      	cbz	r3, 8001a04 <_puts_r+0x78>
 80019cc:	3e01      	subs	r6, #1
 80019ce:	68a3      	ldr	r3, [r4, #8]
 80019d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80019d4:	3b01      	subs	r3, #1
 80019d6:	60a3      	str	r3, [r4, #8]
 80019d8:	bb39      	cbnz	r1, 8001a2a <_puts_r+0x9e>
 80019da:	2b00      	cmp	r3, #0
 80019dc:	da38      	bge.n	8001a50 <_puts_r+0xc4>
 80019de:	4622      	mov	r2, r4
 80019e0:	210a      	movs	r1, #10
 80019e2:	4628      	mov	r0, r5
 80019e4:	f000 f888 	bl	8001af8 <__swbuf_r>
 80019e8:	3001      	adds	r0, #1
 80019ea:	d011      	beq.n	8001a10 <_puts_r+0x84>
 80019ec:	250a      	movs	r5, #10
 80019ee:	e011      	b.n	8001a14 <_puts_r+0x88>
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <_puts_r+0xd4>)
 80019f2:	429c      	cmp	r4, r3
 80019f4:	d101      	bne.n	80019fa <_puts_r+0x6e>
 80019f6:	68ac      	ldr	r4, [r5, #8]
 80019f8:	e7da      	b.n	80019b0 <_puts_r+0x24>
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <_puts_r+0xd8>)
 80019fc:	429c      	cmp	r4, r3
 80019fe:	bf08      	it	eq
 8001a00:	68ec      	ldreq	r4, [r5, #12]
 8001a02:	e7d5      	b.n	80019b0 <_puts_r+0x24>
 8001a04:	4621      	mov	r1, r4
 8001a06:	4628      	mov	r0, r5
 8001a08:	f000 f8c8 	bl	8001b9c <__swsetup_r>
 8001a0c:	2800      	cmp	r0, #0
 8001a0e:	d0dd      	beq.n	80019cc <_puts_r+0x40>
 8001a10:	f04f 35ff 	mov.w	r5, #4294967295
 8001a14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a16:	07da      	lsls	r2, r3, #31
 8001a18:	d405      	bmi.n	8001a26 <_puts_r+0x9a>
 8001a1a:	89a3      	ldrh	r3, [r4, #12]
 8001a1c:	059b      	lsls	r3, r3, #22
 8001a1e:	d402      	bmi.n	8001a26 <_puts_r+0x9a>
 8001a20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a22:	f000 fae2 	bl	8001fea <__retarget_lock_release_recursive>
 8001a26:	4628      	mov	r0, r5
 8001a28:	bd70      	pop	{r4, r5, r6, pc}
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da04      	bge.n	8001a38 <_puts_r+0xac>
 8001a2e:	69a2      	ldr	r2, [r4, #24]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dc06      	bgt.n	8001a42 <_puts_r+0xb6>
 8001a34:	290a      	cmp	r1, #10
 8001a36:	d004      	beq.n	8001a42 <_puts_r+0xb6>
 8001a38:	6823      	ldr	r3, [r4, #0]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	6022      	str	r2, [r4, #0]
 8001a3e:	7019      	strb	r1, [r3, #0]
 8001a40:	e7c5      	b.n	80019ce <_puts_r+0x42>
 8001a42:	4622      	mov	r2, r4
 8001a44:	4628      	mov	r0, r5
 8001a46:	f000 f857 	bl	8001af8 <__swbuf_r>
 8001a4a:	3001      	adds	r0, #1
 8001a4c:	d1bf      	bne.n	80019ce <_puts_r+0x42>
 8001a4e:	e7df      	b.n	8001a10 <_puts_r+0x84>
 8001a50:	6823      	ldr	r3, [r4, #0]
 8001a52:	250a      	movs	r5, #10
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	6022      	str	r2, [r4, #0]
 8001a58:	701d      	strb	r5, [r3, #0]
 8001a5a:	e7db      	b.n	8001a14 <_puts_r+0x88>
 8001a5c:	08002e58 	.word	0x08002e58
 8001a60:	08002e78 	.word	0x08002e78
 8001a64:	08002e38 	.word	0x08002e38

08001a68 <puts>:
 8001a68:	4b02      	ldr	r3, [pc, #8]	; (8001a74 <puts+0xc>)
 8001a6a:	4601      	mov	r1, r0
 8001a6c:	6818      	ldr	r0, [r3, #0]
 8001a6e:	f7ff bf8d 	b.w	800198c <_puts_r>
 8001a72:	bf00      	nop
 8001a74:	2000000c 	.word	0x2000000c

08001a78 <strcpy>:
 8001a78:	4603      	mov	r3, r0
 8001a7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001a7e:	f803 2b01 	strb.w	r2, [r3], #1
 8001a82:	2a00      	cmp	r2, #0
 8001a84:	d1f9      	bne.n	8001a7a <strcpy+0x2>
 8001a86:	4770      	bx	lr

08001a88 <strstr>:
 8001a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8a:	780c      	ldrb	r4, [r1, #0]
 8001a8c:	b164      	cbz	r4, 8001aa8 <strstr+0x20>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	781a      	ldrb	r2, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	1c5e      	adds	r6, r3, #1
 8001a96:	b90a      	cbnz	r2, 8001a9c <strstr+0x14>
 8001a98:	4610      	mov	r0, r2
 8001a9a:	e005      	b.n	8001aa8 <strstr+0x20>
 8001a9c:	4294      	cmp	r4, r2
 8001a9e:	d108      	bne.n	8001ab2 <strstr+0x2a>
 8001aa0:	460d      	mov	r5, r1
 8001aa2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8001aa6:	b902      	cbnz	r2, 8001aaa <strstr+0x22>
 8001aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aaa:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8001aae:	4297      	cmp	r7, r2
 8001ab0:	d0f7      	beq.n	8001aa2 <strstr+0x1a>
 8001ab2:	4633      	mov	r3, r6
 8001ab4:	e7ec      	b.n	8001a90 <strstr+0x8>
	...

08001ab8 <_vsiprintf_r>:
 8001ab8:	b500      	push	{lr}
 8001aba:	b09b      	sub	sp, #108	; 0x6c
 8001abc:	9100      	str	r1, [sp, #0]
 8001abe:	9104      	str	r1, [sp, #16]
 8001ac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001ac4:	9105      	str	r1, [sp, #20]
 8001ac6:	9102      	str	r1, [sp, #8]
 8001ac8:	4905      	ldr	r1, [pc, #20]	; (8001ae0 <_vsiprintf_r+0x28>)
 8001aca:	9103      	str	r1, [sp, #12]
 8001acc:	4669      	mov	r1, sp
 8001ace:	f000 fbf7 	bl	80022c0 <_svfiprintf_r>
 8001ad2:	9b00      	ldr	r3, [sp, #0]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	b01b      	add	sp, #108	; 0x6c
 8001ada:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ade:	bf00      	nop
 8001ae0:	ffff0208 	.word	0xffff0208

08001ae4 <vsiprintf>:
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	4601      	mov	r1, r0
 8001aea:	4802      	ldr	r0, [pc, #8]	; (8001af4 <vsiprintf+0x10>)
 8001aec:	6800      	ldr	r0, [r0, #0]
 8001aee:	f7ff bfe3 	b.w	8001ab8 <_vsiprintf_r>
 8001af2:	bf00      	nop
 8001af4:	2000000c 	.word	0x2000000c

08001af8 <__swbuf_r>:
 8001af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afa:	460e      	mov	r6, r1
 8001afc:	4614      	mov	r4, r2
 8001afe:	4605      	mov	r5, r0
 8001b00:	b118      	cbz	r0, 8001b0a <__swbuf_r+0x12>
 8001b02:	6983      	ldr	r3, [r0, #24]
 8001b04:	b90b      	cbnz	r3, 8001b0a <__swbuf_r+0x12>
 8001b06:	f000 f9d1 	bl	8001eac <__sinit>
 8001b0a:	4b21      	ldr	r3, [pc, #132]	; (8001b90 <__swbuf_r+0x98>)
 8001b0c:	429c      	cmp	r4, r3
 8001b0e:	d12b      	bne.n	8001b68 <__swbuf_r+0x70>
 8001b10:	686c      	ldr	r4, [r5, #4]
 8001b12:	69a3      	ldr	r3, [r4, #24]
 8001b14:	60a3      	str	r3, [r4, #8]
 8001b16:	89a3      	ldrh	r3, [r4, #12]
 8001b18:	071a      	lsls	r2, r3, #28
 8001b1a:	d52f      	bpl.n	8001b7c <__swbuf_r+0x84>
 8001b1c:	6923      	ldr	r3, [r4, #16]
 8001b1e:	b36b      	cbz	r3, 8001b7c <__swbuf_r+0x84>
 8001b20:	6923      	ldr	r3, [r4, #16]
 8001b22:	6820      	ldr	r0, [r4, #0]
 8001b24:	1ac0      	subs	r0, r0, r3
 8001b26:	6963      	ldr	r3, [r4, #20]
 8001b28:	b2f6      	uxtb	r6, r6
 8001b2a:	4283      	cmp	r3, r0
 8001b2c:	4637      	mov	r7, r6
 8001b2e:	dc04      	bgt.n	8001b3a <__swbuf_r+0x42>
 8001b30:	4621      	mov	r1, r4
 8001b32:	4628      	mov	r0, r5
 8001b34:	f000 f926 	bl	8001d84 <_fflush_r>
 8001b38:	bb30      	cbnz	r0, 8001b88 <__swbuf_r+0x90>
 8001b3a:	68a3      	ldr	r3, [r4, #8]
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	60a3      	str	r3, [r4, #8]
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	6022      	str	r2, [r4, #0]
 8001b46:	701e      	strb	r6, [r3, #0]
 8001b48:	6963      	ldr	r3, [r4, #20]
 8001b4a:	3001      	adds	r0, #1
 8001b4c:	4283      	cmp	r3, r0
 8001b4e:	d004      	beq.n	8001b5a <__swbuf_r+0x62>
 8001b50:	89a3      	ldrh	r3, [r4, #12]
 8001b52:	07db      	lsls	r3, r3, #31
 8001b54:	d506      	bpl.n	8001b64 <__swbuf_r+0x6c>
 8001b56:	2e0a      	cmp	r6, #10
 8001b58:	d104      	bne.n	8001b64 <__swbuf_r+0x6c>
 8001b5a:	4621      	mov	r1, r4
 8001b5c:	4628      	mov	r0, r5
 8001b5e:	f000 f911 	bl	8001d84 <_fflush_r>
 8001b62:	b988      	cbnz	r0, 8001b88 <__swbuf_r+0x90>
 8001b64:	4638      	mov	r0, r7
 8001b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <__swbuf_r+0x9c>)
 8001b6a:	429c      	cmp	r4, r3
 8001b6c:	d101      	bne.n	8001b72 <__swbuf_r+0x7a>
 8001b6e:	68ac      	ldr	r4, [r5, #8]
 8001b70:	e7cf      	b.n	8001b12 <__swbuf_r+0x1a>
 8001b72:	4b09      	ldr	r3, [pc, #36]	; (8001b98 <__swbuf_r+0xa0>)
 8001b74:	429c      	cmp	r4, r3
 8001b76:	bf08      	it	eq
 8001b78:	68ec      	ldreq	r4, [r5, #12]
 8001b7a:	e7ca      	b.n	8001b12 <__swbuf_r+0x1a>
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	4628      	mov	r0, r5
 8001b80:	f000 f80c 	bl	8001b9c <__swsetup_r>
 8001b84:	2800      	cmp	r0, #0
 8001b86:	d0cb      	beq.n	8001b20 <__swbuf_r+0x28>
 8001b88:	f04f 37ff 	mov.w	r7, #4294967295
 8001b8c:	e7ea      	b.n	8001b64 <__swbuf_r+0x6c>
 8001b8e:	bf00      	nop
 8001b90:	08002e58 	.word	0x08002e58
 8001b94:	08002e78 	.word	0x08002e78
 8001b98:	08002e38 	.word	0x08002e38

08001b9c <__swsetup_r>:
 8001b9c:	4b32      	ldr	r3, [pc, #200]	; (8001c68 <__swsetup_r+0xcc>)
 8001b9e:	b570      	push	{r4, r5, r6, lr}
 8001ba0:	681d      	ldr	r5, [r3, #0]
 8001ba2:	4606      	mov	r6, r0
 8001ba4:	460c      	mov	r4, r1
 8001ba6:	b125      	cbz	r5, 8001bb2 <__swsetup_r+0x16>
 8001ba8:	69ab      	ldr	r3, [r5, #24]
 8001baa:	b913      	cbnz	r3, 8001bb2 <__swsetup_r+0x16>
 8001bac:	4628      	mov	r0, r5
 8001bae:	f000 f97d 	bl	8001eac <__sinit>
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <__swsetup_r+0xd0>)
 8001bb4:	429c      	cmp	r4, r3
 8001bb6:	d10f      	bne.n	8001bd8 <__swsetup_r+0x3c>
 8001bb8:	686c      	ldr	r4, [r5, #4]
 8001bba:	89a3      	ldrh	r3, [r4, #12]
 8001bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bc0:	0719      	lsls	r1, r3, #28
 8001bc2:	d42c      	bmi.n	8001c1e <__swsetup_r+0x82>
 8001bc4:	06dd      	lsls	r5, r3, #27
 8001bc6:	d411      	bmi.n	8001bec <__swsetup_r+0x50>
 8001bc8:	2309      	movs	r3, #9
 8001bca:	6033      	str	r3, [r6, #0]
 8001bcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001bd0:	81a3      	strh	r3, [r4, #12]
 8001bd2:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd6:	e03e      	b.n	8001c56 <__swsetup_r+0xba>
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <__swsetup_r+0xd4>)
 8001bda:	429c      	cmp	r4, r3
 8001bdc:	d101      	bne.n	8001be2 <__swsetup_r+0x46>
 8001bde:	68ac      	ldr	r4, [r5, #8]
 8001be0:	e7eb      	b.n	8001bba <__swsetup_r+0x1e>
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <__swsetup_r+0xd8>)
 8001be4:	429c      	cmp	r4, r3
 8001be6:	bf08      	it	eq
 8001be8:	68ec      	ldreq	r4, [r5, #12]
 8001bea:	e7e6      	b.n	8001bba <__swsetup_r+0x1e>
 8001bec:	0758      	lsls	r0, r3, #29
 8001bee:	d512      	bpl.n	8001c16 <__swsetup_r+0x7a>
 8001bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bf2:	b141      	cbz	r1, 8001c06 <__swsetup_r+0x6a>
 8001bf4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bf8:	4299      	cmp	r1, r3
 8001bfa:	d002      	beq.n	8001c02 <__swsetup_r+0x66>
 8001bfc:	4630      	mov	r0, r6
 8001bfe:	f000 fa59 	bl	80020b4 <_free_r>
 8001c02:	2300      	movs	r3, #0
 8001c04:	6363      	str	r3, [r4, #52]	; 0x34
 8001c06:	89a3      	ldrh	r3, [r4, #12]
 8001c08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c0c:	81a3      	strh	r3, [r4, #12]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	6063      	str	r3, [r4, #4]
 8001c12:	6923      	ldr	r3, [r4, #16]
 8001c14:	6023      	str	r3, [r4, #0]
 8001c16:	89a3      	ldrh	r3, [r4, #12]
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	81a3      	strh	r3, [r4, #12]
 8001c1e:	6923      	ldr	r3, [r4, #16]
 8001c20:	b94b      	cbnz	r3, 8001c36 <__swsetup_r+0x9a>
 8001c22:	89a3      	ldrh	r3, [r4, #12]
 8001c24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c2c:	d003      	beq.n	8001c36 <__swsetup_r+0x9a>
 8001c2e:	4621      	mov	r1, r4
 8001c30:	4630      	mov	r0, r6
 8001c32:	f000 f9ff 	bl	8002034 <__smakebuf_r>
 8001c36:	89a0      	ldrh	r0, [r4, #12]
 8001c38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c3c:	f010 0301 	ands.w	r3, r0, #1
 8001c40:	d00a      	beq.n	8001c58 <__swsetup_r+0xbc>
 8001c42:	2300      	movs	r3, #0
 8001c44:	60a3      	str	r3, [r4, #8]
 8001c46:	6963      	ldr	r3, [r4, #20]
 8001c48:	425b      	negs	r3, r3
 8001c4a:	61a3      	str	r3, [r4, #24]
 8001c4c:	6923      	ldr	r3, [r4, #16]
 8001c4e:	b943      	cbnz	r3, 8001c62 <__swsetup_r+0xc6>
 8001c50:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c54:	d1ba      	bne.n	8001bcc <__swsetup_r+0x30>
 8001c56:	bd70      	pop	{r4, r5, r6, pc}
 8001c58:	0781      	lsls	r1, r0, #30
 8001c5a:	bf58      	it	pl
 8001c5c:	6963      	ldrpl	r3, [r4, #20]
 8001c5e:	60a3      	str	r3, [r4, #8]
 8001c60:	e7f4      	b.n	8001c4c <__swsetup_r+0xb0>
 8001c62:	2000      	movs	r0, #0
 8001c64:	e7f7      	b.n	8001c56 <__swsetup_r+0xba>
 8001c66:	bf00      	nop
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	08002e58 	.word	0x08002e58
 8001c70:	08002e78 	.word	0x08002e78
 8001c74:	08002e38 	.word	0x08002e38

08001c78 <__sflush_r>:
 8001c78:	898a      	ldrh	r2, [r1, #12]
 8001c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c7e:	4605      	mov	r5, r0
 8001c80:	0710      	lsls	r0, r2, #28
 8001c82:	460c      	mov	r4, r1
 8001c84:	d458      	bmi.n	8001d38 <__sflush_r+0xc0>
 8001c86:	684b      	ldr	r3, [r1, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	dc05      	bgt.n	8001c98 <__sflush_r+0x20>
 8001c8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	dc02      	bgt.n	8001c98 <__sflush_r+0x20>
 8001c92:	2000      	movs	r0, #0
 8001c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c9a:	2e00      	cmp	r6, #0
 8001c9c:	d0f9      	beq.n	8001c92 <__sflush_r+0x1a>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ca4:	682f      	ldr	r7, [r5, #0]
 8001ca6:	602b      	str	r3, [r5, #0]
 8001ca8:	d032      	beq.n	8001d10 <__sflush_r+0x98>
 8001caa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cac:	89a3      	ldrh	r3, [r4, #12]
 8001cae:	075a      	lsls	r2, r3, #29
 8001cb0:	d505      	bpl.n	8001cbe <__sflush_r+0x46>
 8001cb2:	6863      	ldr	r3, [r4, #4]
 8001cb4:	1ac0      	subs	r0, r0, r3
 8001cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001cb8:	b10b      	cbz	r3, 8001cbe <__sflush_r+0x46>
 8001cba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cbc:	1ac0      	subs	r0, r0, r3
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001cc4:	6a21      	ldr	r1, [r4, #32]
 8001cc6:	4628      	mov	r0, r5
 8001cc8:	47b0      	blx	r6
 8001cca:	1c43      	adds	r3, r0, #1
 8001ccc:	89a3      	ldrh	r3, [r4, #12]
 8001cce:	d106      	bne.n	8001cde <__sflush_r+0x66>
 8001cd0:	6829      	ldr	r1, [r5, #0]
 8001cd2:	291d      	cmp	r1, #29
 8001cd4:	d82c      	bhi.n	8001d30 <__sflush_r+0xb8>
 8001cd6:	4a2a      	ldr	r2, [pc, #168]	; (8001d80 <__sflush_r+0x108>)
 8001cd8:	40ca      	lsrs	r2, r1
 8001cda:	07d6      	lsls	r6, r2, #31
 8001cdc:	d528      	bpl.n	8001d30 <__sflush_r+0xb8>
 8001cde:	2200      	movs	r2, #0
 8001ce0:	6062      	str	r2, [r4, #4]
 8001ce2:	04d9      	lsls	r1, r3, #19
 8001ce4:	6922      	ldr	r2, [r4, #16]
 8001ce6:	6022      	str	r2, [r4, #0]
 8001ce8:	d504      	bpl.n	8001cf4 <__sflush_r+0x7c>
 8001cea:	1c42      	adds	r2, r0, #1
 8001cec:	d101      	bne.n	8001cf2 <__sflush_r+0x7a>
 8001cee:	682b      	ldr	r3, [r5, #0]
 8001cf0:	b903      	cbnz	r3, 8001cf4 <__sflush_r+0x7c>
 8001cf2:	6560      	str	r0, [r4, #84]	; 0x54
 8001cf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001cf6:	602f      	str	r7, [r5, #0]
 8001cf8:	2900      	cmp	r1, #0
 8001cfa:	d0ca      	beq.n	8001c92 <__sflush_r+0x1a>
 8001cfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d00:	4299      	cmp	r1, r3
 8001d02:	d002      	beq.n	8001d0a <__sflush_r+0x92>
 8001d04:	4628      	mov	r0, r5
 8001d06:	f000 f9d5 	bl	80020b4 <_free_r>
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8001d0e:	e7c1      	b.n	8001c94 <__sflush_r+0x1c>
 8001d10:	6a21      	ldr	r1, [r4, #32]
 8001d12:	2301      	movs	r3, #1
 8001d14:	4628      	mov	r0, r5
 8001d16:	47b0      	blx	r6
 8001d18:	1c41      	adds	r1, r0, #1
 8001d1a:	d1c7      	bne.n	8001cac <__sflush_r+0x34>
 8001d1c:	682b      	ldr	r3, [r5, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0c4      	beq.n	8001cac <__sflush_r+0x34>
 8001d22:	2b1d      	cmp	r3, #29
 8001d24:	d001      	beq.n	8001d2a <__sflush_r+0xb2>
 8001d26:	2b16      	cmp	r3, #22
 8001d28:	d101      	bne.n	8001d2e <__sflush_r+0xb6>
 8001d2a:	602f      	str	r7, [r5, #0]
 8001d2c:	e7b1      	b.n	8001c92 <__sflush_r+0x1a>
 8001d2e:	89a3      	ldrh	r3, [r4, #12]
 8001d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d34:	81a3      	strh	r3, [r4, #12]
 8001d36:	e7ad      	b.n	8001c94 <__sflush_r+0x1c>
 8001d38:	690f      	ldr	r7, [r1, #16]
 8001d3a:	2f00      	cmp	r7, #0
 8001d3c:	d0a9      	beq.n	8001c92 <__sflush_r+0x1a>
 8001d3e:	0793      	lsls	r3, r2, #30
 8001d40:	680e      	ldr	r6, [r1, #0]
 8001d42:	bf08      	it	eq
 8001d44:	694b      	ldreq	r3, [r1, #20]
 8001d46:	600f      	str	r7, [r1, #0]
 8001d48:	bf18      	it	ne
 8001d4a:	2300      	movne	r3, #0
 8001d4c:	eba6 0807 	sub.w	r8, r6, r7
 8001d50:	608b      	str	r3, [r1, #8]
 8001d52:	f1b8 0f00 	cmp.w	r8, #0
 8001d56:	dd9c      	ble.n	8001c92 <__sflush_r+0x1a>
 8001d58:	6a21      	ldr	r1, [r4, #32]
 8001d5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d5c:	4643      	mov	r3, r8
 8001d5e:	463a      	mov	r2, r7
 8001d60:	4628      	mov	r0, r5
 8001d62:	47b0      	blx	r6
 8001d64:	2800      	cmp	r0, #0
 8001d66:	dc06      	bgt.n	8001d76 <__sflush_r+0xfe>
 8001d68:	89a3      	ldrh	r3, [r4, #12]
 8001d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d6e:	81a3      	strh	r3, [r4, #12]
 8001d70:	f04f 30ff 	mov.w	r0, #4294967295
 8001d74:	e78e      	b.n	8001c94 <__sflush_r+0x1c>
 8001d76:	4407      	add	r7, r0
 8001d78:	eba8 0800 	sub.w	r8, r8, r0
 8001d7c:	e7e9      	b.n	8001d52 <__sflush_r+0xda>
 8001d7e:	bf00      	nop
 8001d80:	20400001 	.word	0x20400001

08001d84 <_fflush_r>:
 8001d84:	b538      	push	{r3, r4, r5, lr}
 8001d86:	690b      	ldr	r3, [r1, #16]
 8001d88:	4605      	mov	r5, r0
 8001d8a:	460c      	mov	r4, r1
 8001d8c:	b913      	cbnz	r3, 8001d94 <_fflush_r+0x10>
 8001d8e:	2500      	movs	r5, #0
 8001d90:	4628      	mov	r0, r5
 8001d92:	bd38      	pop	{r3, r4, r5, pc}
 8001d94:	b118      	cbz	r0, 8001d9e <_fflush_r+0x1a>
 8001d96:	6983      	ldr	r3, [r0, #24]
 8001d98:	b90b      	cbnz	r3, 8001d9e <_fflush_r+0x1a>
 8001d9a:	f000 f887 	bl	8001eac <__sinit>
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <_fflush_r+0x6c>)
 8001da0:	429c      	cmp	r4, r3
 8001da2:	d11b      	bne.n	8001ddc <_fflush_r+0x58>
 8001da4:	686c      	ldr	r4, [r5, #4]
 8001da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0ef      	beq.n	8001d8e <_fflush_r+0xa>
 8001dae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001db0:	07d0      	lsls	r0, r2, #31
 8001db2:	d404      	bmi.n	8001dbe <_fflush_r+0x3a>
 8001db4:	0599      	lsls	r1, r3, #22
 8001db6:	d402      	bmi.n	8001dbe <_fflush_r+0x3a>
 8001db8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dba:	f000 f915 	bl	8001fe8 <__retarget_lock_acquire_recursive>
 8001dbe:	4628      	mov	r0, r5
 8001dc0:	4621      	mov	r1, r4
 8001dc2:	f7ff ff59 	bl	8001c78 <__sflush_r>
 8001dc6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001dc8:	07da      	lsls	r2, r3, #31
 8001dca:	4605      	mov	r5, r0
 8001dcc:	d4e0      	bmi.n	8001d90 <_fflush_r+0xc>
 8001dce:	89a3      	ldrh	r3, [r4, #12]
 8001dd0:	059b      	lsls	r3, r3, #22
 8001dd2:	d4dd      	bmi.n	8001d90 <_fflush_r+0xc>
 8001dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001dd6:	f000 f908 	bl	8001fea <__retarget_lock_release_recursive>
 8001dda:	e7d9      	b.n	8001d90 <_fflush_r+0xc>
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <_fflush_r+0x70>)
 8001dde:	429c      	cmp	r4, r3
 8001de0:	d101      	bne.n	8001de6 <_fflush_r+0x62>
 8001de2:	68ac      	ldr	r4, [r5, #8]
 8001de4:	e7df      	b.n	8001da6 <_fflush_r+0x22>
 8001de6:	4b04      	ldr	r3, [pc, #16]	; (8001df8 <_fflush_r+0x74>)
 8001de8:	429c      	cmp	r4, r3
 8001dea:	bf08      	it	eq
 8001dec:	68ec      	ldreq	r4, [r5, #12]
 8001dee:	e7da      	b.n	8001da6 <_fflush_r+0x22>
 8001df0:	08002e58 	.word	0x08002e58
 8001df4:	08002e78 	.word	0x08002e78
 8001df8:	08002e38 	.word	0x08002e38

08001dfc <std>:
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	b510      	push	{r4, lr}
 8001e00:	4604      	mov	r4, r0
 8001e02:	e9c0 3300 	strd	r3, r3, [r0]
 8001e06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e0a:	6083      	str	r3, [r0, #8]
 8001e0c:	8181      	strh	r1, [r0, #12]
 8001e0e:	6643      	str	r3, [r0, #100]	; 0x64
 8001e10:	81c2      	strh	r2, [r0, #14]
 8001e12:	6183      	str	r3, [r0, #24]
 8001e14:	4619      	mov	r1, r3
 8001e16:	2208      	movs	r2, #8
 8001e18:	305c      	adds	r0, #92	; 0x5c
 8001e1a:	f7ff fd97 	bl	800194c <memset>
 8001e1e:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <std+0x38>)
 8001e20:	6263      	str	r3, [r4, #36]	; 0x24
 8001e22:	4b05      	ldr	r3, [pc, #20]	; (8001e38 <std+0x3c>)
 8001e24:	62a3      	str	r3, [r4, #40]	; 0x28
 8001e26:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <std+0x40>)
 8001e28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <std+0x44>)
 8001e2c:	6224      	str	r4, [r4, #32]
 8001e2e:	6323      	str	r3, [r4, #48]	; 0x30
 8001e30:	bd10      	pop	{r4, pc}
 8001e32:	bf00      	nop
 8001e34:	08002abd 	.word	0x08002abd
 8001e38:	08002adf 	.word	0x08002adf
 8001e3c:	08002b17 	.word	0x08002b17
 8001e40:	08002b3b 	.word	0x08002b3b

08001e44 <_cleanup_r>:
 8001e44:	4901      	ldr	r1, [pc, #4]	; (8001e4c <_cleanup_r+0x8>)
 8001e46:	f000 b8af 	b.w	8001fa8 <_fwalk_reent>
 8001e4a:	bf00      	nop
 8001e4c:	08001d85 	.word	0x08001d85

08001e50 <__sfmoreglue>:
 8001e50:	b570      	push	{r4, r5, r6, lr}
 8001e52:	1e4a      	subs	r2, r1, #1
 8001e54:	2568      	movs	r5, #104	; 0x68
 8001e56:	4355      	muls	r5, r2
 8001e58:	460e      	mov	r6, r1
 8001e5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001e5e:	f000 f979 	bl	8002154 <_malloc_r>
 8001e62:	4604      	mov	r4, r0
 8001e64:	b140      	cbz	r0, 8001e78 <__sfmoreglue+0x28>
 8001e66:	2100      	movs	r1, #0
 8001e68:	e9c0 1600 	strd	r1, r6, [r0]
 8001e6c:	300c      	adds	r0, #12
 8001e6e:	60a0      	str	r0, [r4, #8]
 8001e70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001e74:	f7ff fd6a 	bl	800194c <memset>
 8001e78:	4620      	mov	r0, r4
 8001e7a:	bd70      	pop	{r4, r5, r6, pc}

08001e7c <__sfp_lock_acquire>:
 8001e7c:	4801      	ldr	r0, [pc, #4]	; (8001e84 <__sfp_lock_acquire+0x8>)
 8001e7e:	f000 b8b3 	b.w	8001fe8 <__retarget_lock_acquire_recursive>
 8001e82:	bf00      	nop
 8001e84:	2000023c 	.word	0x2000023c

08001e88 <__sfp_lock_release>:
 8001e88:	4801      	ldr	r0, [pc, #4]	; (8001e90 <__sfp_lock_release+0x8>)
 8001e8a:	f000 b8ae 	b.w	8001fea <__retarget_lock_release_recursive>
 8001e8e:	bf00      	nop
 8001e90:	2000023c 	.word	0x2000023c

08001e94 <__sinit_lock_acquire>:
 8001e94:	4801      	ldr	r0, [pc, #4]	; (8001e9c <__sinit_lock_acquire+0x8>)
 8001e96:	f000 b8a7 	b.w	8001fe8 <__retarget_lock_acquire_recursive>
 8001e9a:	bf00      	nop
 8001e9c:	20000237 	.word	0x20000237

08001ea0 <__sinit_lock_release>:
 8001ea0:	4801      	ldr	r0, [pc, #4]	; (8001ea8 <__sinit_lock_release+0x8>)
 8001ea2:	f000 b8a2 	b.w	8001fea <__retarget_lock_release_recursive>
 8001ea6:	bf00      	nop
 8001ea8:	20000237 	.word	0x20000237

08001eac <__sinit>:
 8001eac:	b510      	push	{r4, lr}
 8001eae:	4604      	mov	r4, r0
 8001eb0:	f7ff fff0 	bl	8001e94 <__sinit_lock_acquire>
 8001eb4:	69a3      	ldr	r3, [r4, #24]
 8001eb6:	b11b      	cbz	r3, 8001ec0 <__sinit+0x14>
 8001eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ebc:	f7ff bff0 	b.w	8001ea0 <__sinit_lock_release>
 8001ec0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001ec4:	6523      	str	r3, [r4, #80]	; 0x50
 8001ec6:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <__sinit+0x68>)
 8001ec8:	4a13      	ldr	r2, [pc, #76]	; (8001f18 <__sinit+0x6c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	62a2      	str	r2, [r4, #40]	; 0x28
 8001ece:	42a3      	cmp	r3, r4
 8001ed0:	bf04      	itt	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	61a3      	streq	r3, [r4, #24]
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f000 f820 	bl	8001f1c <__sfp>
 8001edc:	6060      	str	r0, [r4, #4]
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f000 f81c 	bl	8001f1c <__sfp>
 8001ee4:	60a0      	str	r0, [r4, #8]
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	f000 f818 	bl	8001f1c <__sfp>
 8001eec:	2200      	movs	r2, #0
 8001eee:	60e0      	str	r0, [r4, #12]
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	6860      	ldr	r0, [r4, #4]
 8001ef4:	f7ff ff82 	bl	8001dfc <std>
 8001ef8:	68a0      	ldr	r0, [r4, #8]
 8001efa:	2201      	movs	r2, #1
 8001efc:	2109      	movs	r1, #9
 8001efe:	f7ff ff7d 	bl	8001dfc <std>
 8001f02:	68e0      	ldr	r0, [r4, #12]
 8001f04:	2202      	movs	r2, #2
 8001f06:	2112      	movs	r1, #18
 8001f08:	f7ff ff78 	bl	8001dfc <std>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	61a3      	str	r3, [r4, #24]
 8001f10:	e7d2      	b.n	8001eb8 <__sinit+0xc>
 8001f12:	bf00      	nop
 8001f14:	08002e34 	.word	0x08002e34
 8001f18:	08001e45 	.word	0x08001e45

08001f1c <__sfp>:
 8001f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1e:	4607      	mov	r7, r0
 8001f20:	f7ff ffac 	bl	8001e7c <__sfp_lock_acquire>
 8001f24:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <__sfp+0x84>)
 8001f26:	681e      	ldr	r6, [r3, #0]
 8001f28:	69b3      	ldr	r3, [r6, #24]
 8001f2a:	b913      	cbnz	r3, 8001f32 <__sfp+0x16>
 8001f2c:	4630      	mov	r0, r6
 8001f2e:	f7ff ffbd 	bl	8001eac <__sinit>
 8001f32:	3648      	adds	r6, #72	; 0x48
 8001f34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	d503      	bpl.n	8001f44 <__sfp+0x28>
 8001f3c:	6833      	ldr	r3, [r6, #0]
 8001f3e:	b30b      	cbz	r3, 8001f84 <__sfp+0x68>
 8001f40:	6836      	ldr	r6, [r6, #0]
 8001f42:	e7f7      	b.n	8001f34 <__sfp+0x18>
 8001f44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001f48:	b9d5      	cbnz	r5, 8001f80 <__sfp+0x64>
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <__sfp+0x88>)
 8001f4c:	60e3      	str	r3, [r4, #12]
 8001f4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001f52:	6665      	str	r5, [r4, #100]	; 0x64
 8001f54:	f000 f847 	bl	8001fe6 <__retarget_lock_init_recursive>
 8001f58:	f7ff ff96 	bl	8001e88 <__sfp_lock_release>
 8001f5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001f60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001f64:	6025      	str	r5, [r4, #0]
 8001f66:	61a5      	str	r5, [r4, #24]
 8001f68:	2208      	movs	r2, #8
 8001f6a:	4629      	mov	r1, r5
 8001f6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001f70:	f7ff fcec 	bl	800194c <memset>
 8001f74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001f78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f80:	3468      	adds	r4, #104	; 0x68
 8001f82:	e7d9      	b.n	8001f38 <__sfp+0x1c>
 8001f84:	2104      	movs	r1, #4
 8001f86:	4638      	mov	r0, r7
 8001f88:	f7ff ff62 	bl	8001e50 <__sfmoreglue>
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	6030      	str	r0, [r6, #0]
 8001f90:	2800      	cmp	r0, #0
 8001f92:	d1d5      	bne.n	8001f40 <__sfp+0x24>
 8001f94:	f7ff ff78 	bl	8001e88 <__sfp_lock_release>
 8001f98:	230c      	movs	r3, #12
 8001f9a:	603b      	str	r3, [r7, #0]
 8001f9c:	e7ee      	b.n	8001f7c <__sfp+0x60>
 8001f9e:	bf00      	nop
 8001fa0:	08002e34 	.word	0x08002e34
 8001fa4:	ffff0001 	.word	0xffff0001

08001fa8 <_fwalk_reent>:
 8001fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001fac:	4606      	mov	r6, r0
 8001fae:	4688      	mov	r8, r1
 8001fb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001fb4:	2700      	movs	r7, #0
 8001fb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001fba:	f1b9 0901 	subs.w	r9, r9, #1
 8001fbe:	d505      	bpl.n	8001fcc <_fwalk_reent+0x24>
 8001fc0:	6824      	ldr	r4, [r4, #0]
 8001fc2:	2c00      	cmp	r4, #0
 8001fc4:	d1f7      	bne.n	8001fb6 <_fwalk_reent+0xe>
 8001fc6:	4638      	mov	r0, r7
 8001fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001fcc:	89ab      	ldrh	r3, [r5, #12]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d907      	bls.n	8001fe2 <_fwalk_reent+0x3a>
 8001fd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	d003      	beq.n	8001fe2 <_fwalk_reent+0x3a>
 8001fda:	4629      	mov	r1, r5
 8001fdc:	4630      	mov	r0, r6
 8001fde:	47c0      	blx	r8
 8001fe0:	4307      	orrs	r7, r0
 8001fe2:	3568      	adds	r5, #104	; 0x68
 8001fe4:	e7e9      	b.n	8001fba <_fwalk_reent+0x12>

08001fe6 <__retarget_lock_init_recursive>:
 8001fe6:	4770      	bx	lr

08001fe8 <__retarget_lock_acquire_recursive>:
 8001fe8:	4770      	bx	lr

08001fea <__retarget_lock_release_recursive>:
 8001fea:	4770      	bx	lr

08001fec <__swhatbuf_r>:
 8001fec:	b570      	push	{r4, r5, r6, lr}
 8001fee:	460e      	mov	r6, r1
 8001ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ff4:	2900      	cmp	r1, #0
 8001ff6:	b096      	sub	sp, #88	; 0x58
 8001ff8:	4614      	mov	r4, r2
 8001ffa:	461d      	mov	r5, r3
 8001ffc:	da07      	bge.n	800200e <__swhatbuf_r+0x22>
 8001ffe:	2300      	movs	r3, #0
 8002000:	602b      	str	r3, [r5, #0]
 8002002:	89b3      	ldrh	r3, [r6, #12]
 8002004:	061a      	lsls	r2, r3, #24
 8002006:	d410      	bmi.n	800202a <__swhatbuf_r+0x3e>
 8002008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200c:	e00e      	b.n	800202c <__swhatbuf_r+0x40>
 800200e:	466a      	mov	r2, sp
 8002010:	f000 fdba 	bl	8002b88 <_fstat_r>
 8002014:	2800      	cmp	r0, #0
 8002016:	dbf2      	blt.n	8001ffe <__swhatbuf_r+0x12>
 8002018:	9a01      	ldr	r2, [sp, #4]
 800201a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800201e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002022:	425a      	negs	r2, r3
 8002024:	415a      	adcs	r2, r3
 8002026:	602a      	str	r2, [r5, #0]
 8002028:	e7ee      	b.n	8002008 <__swhatbuf_r+0x1c>
 800202a:	2340      	movs	r3, #64	; 0x40
 800202c:	2000      	movs	r0, #0
 800202e:	6023      	str	r3, [r4, #0]
 8002030:	b016      	add	sp, #88	; 0x58
 8002032:	bd70      	pop	{r4, r5, r6, pc}

08002034 <__smakebuf_r>:
 8002034:	898b      	ldrh	r3, [r1, #12]
 8002036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002038:	079d      	lsls	r5, r3, #30
 800203a:	4606      	mov	r6, r0
 800203c:	460c      	mov	r4, r1
 800203e:	d507      	bpl.n	8002050 <__smakebuf_r+0x1c>
 8002040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002044:	6023      	str	r3, [r4, #0]
 8002046:	6123      	str	r3, [r4, #16]
 8002048:	2301      	movs	r3, #1
 800204a:	6163      	str	r3, [r4, #20]
 800204c:	b002      	add	sp, #8
 800204e:	bd70      	pop	{r4, r5, r6, pc}
 8002050:	ab01      	add	r3, sp, #4
 8002052:	466a      	mov	r2, sp
 8002054:	f7ff ffca 	bl	8001fec <__swhatbuf_r>
 8002058:	9900      	ldr	r1, [sp, #0]
 800205a:	4605      	mov	r5, r0
 800205c:	4630      	mov	r0, r6
 800205e:	f000 f879 	bl	8002154 <_malloc_r>
 8002062:	b948      	cbnz	r0, 8002078 <__smakebuf_r+0x44>
 8002064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002068:	059a      	lsls	r2, r3, #22
 800206a:	d4ef      	bmi.n	800204c <__smakebuf_r+0x18>
 800206c:	f023 0303 	bic.w	r3, r3, #3
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	81a3      	strh	r3, [r4, #12]
 8002076:	e7e3      	b.n	8002040 <__smakebuf_r+0xc>
 8002078:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <__smakebuf_r+0x7c>)
 800207a:	62b3      	str	r3, [r6, #40]	; 0x28
 800207c:	89a3      	ldrh	r3, [r4, #12]
 800207e:	6020      	str	r0, [r4, #0]
 8002080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002084:	81a3      	strh	r3, [r4, #12]
 8002086:	9b00      	ldr	r3, [sp, #0]
 8002088:	6163      	str	r3, [r4, #20]
 800208a:	9b01      	ldr	r3, [sp, #4]
 800208c:	6120      	str	r0, [r4, #16]
 800208e:	b15b      	cbz	r3, 80020a8 <__smakebuf_r+0x74>
 8002090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002094:	4630      	mov	r0, r6
 8002096:	f000 fd89 	bl	8002bac <_isatty_r>
 800209a:	b128      	cbz	r0, 80020a8 <__smakebuf_r+0x74>
 800209c:	89a3      	ldrh	r3, [r4, #12]
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	f043 0301 	orr.w	r3, r3, #1
 80020a6:	81a3      	strh	r3, [r4, #12]
 80020a8:	89a0      	ldrh	r0, [r4, #12]
 80020aa:	4305      	orrs	r5, r0
 80020ac:	81a5      	strh	r5, [r4, #12]
 80020ae:	e7cd      	b.n	800204c <__smakebuf_r+0x18>
 80020b0:	08001e45 	.word	0x08001e45

080020b4 <_free_r>:
 80020b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020b6:	2900      	cmp	r1, #0
 80020b8:	d048      	beq.n	800214c <_free_r+0x98>
 80020ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020be:	9001      	str	r0, [sp, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f1a1 0404 	sub.w	r4, r1, #4
 80020c6:	bfb8      	it	lt
 80020c8:	18e4      	addlt	r4, r4, r3
 80020ca:	f000 fdb9 	bl	8002c40 <__malloc_lock>
 80020ce:	4a20      	ldr	r2, [pc, #128]	; (8002150 <_free_r+0x9c>)
 80020d0:	9801      	ldr	r0, [sp, #4]
 80020d2:	6813      	ldr	r3, [r2, #0]
 80020d4:	4615      	mov	r5, r2
 80020d6:	b933      	cbnz	r3, 80020e6 <_free_r+0x32>
 80020d8:	6063      	str	r3, [r4, #4]
 80020da:	6014      	str	r4, [r2, #0]
 80020dc:	b003      	add	sp, #12
 80020de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80020e2:	f000 bdb3 	b.w	8002c4c <__malloc_unlock>
 80020e6:	42a3      	cmp	r3, r4
 80020e8:	d90b      	bls.n	8002102 <_free_r+0x4e>
 80020ea:	6821      	ldr	r1, [r4, #0]
 80020ec:	1862      	adds	r2, r4, r1
 80020ee:	4293      	cmp	r3, r2
 80020f0:	bf04      	itt	eq
 80020f2:	681a      	ldreq	r2, [r3, #0]
 80020f4:	685b      	ldreq	r3, [r3, #4]
 80020f6:	6063      	str	r3, [r4, #4]
 80020f8:	bf04      	itt	eq
 80020fa:	1852      	addeq	r2, r2, r1
 80020fc:	6022      	streq	r2, [r4, #0]
 80020fe:	602c      	str	r4, [r5, #0]
 8002100:	e7ec      	b.n	80020dc <_free_r+0x28>
 8002102:	461a      	mov	r2, r3
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	b10b      	cbz	r3, 800210c <_free_r+0x58>
 8002108:	42a3      	cmp	r3, r4
 800210a:	d9fa      	bls.n	8002102 <_free_r+0x4e>
 800210c:	6811      	ldr	r1, [r2, #0]
 800210e:	1855      	adds	r5, r2, r1
 8002110:	42a5      	cmp	r5, r4
 8002112:	d10b      	bne.n	800212c <_free_r+0x78>
 8002114:	6824      	ldr	r4, [r4, #0]
 8002116:	4421      	add	r1, r4
 8002118:	1854      	adds	r4, r2, r1
 800211a:	42a3      	cmp	r3, r4
 800211c:	6011      	str	r1, [r2, #0]
 800211e:	d1dd      	bne.n	80020dc <_free_r+0x28>
 8002120:	681c      	ldr	r4, [r3, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	6053      	str	r3, [r2, #4]
 8002126:	4421      	add	r1, r4
 8002128:	6011      	str	r1, [r2, #0]
 800212a:	e7d7      	b.n	80020dc <_free_r+0x28>
 800212c:	d902      	bls.n	8002134 <_free_r+0x80>
 800212e:	230c      	movs	r3, #12
 8002130:	6003      	str	r3, [r0, #0]
 8002132:	e7d3      	b.n	80020dc <_free_r+0x28>
 8002134:	6825      	ldr	r5, [r4, #0]
 8002136:	1961      	adds	r1, r4, r5
 8002138:	428b      	cmp	r3, r1
 800213a:	bf04      	itt	eq
 800213c:	6819      	ldreq	r1, [r3, #0]
 800213e:	685b      	ldreq	r3, [r3, #4]
 8002140:	6063      	str	r3, [r4, #4]
 8002142:	bf04      	itt	eq
 8002144:	1949      	addeq	r1, r1, r5
 8002146:	6021      	streq	r1, [r4, #0]
 8002148:	6054      	str	r4, [r2, #4]
 800214a:	e7c7      	b.n	80020dc <_free_r+0x28>
 800214c:	b003      	add	sp, #12
 800214e:	bd30      	pop	{r4, r5, pc}
 8002150:	20000098 	.word	0x20000098

08002154 <_malloc_r>:
 8002154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002156:	1ccd      	adds	r5, r1, #3
 8002158:	f025 0503 	bic.w	r5, r5, #3
 800215c:	3508      	adds	r5, #8
 800215e:	2d0c      	cmp	r5, #12
 8002160:	bf38      	it	cc
 8002162:	250c      	movcc	r5, #12
 8002164:	2d00      	cmp	r5, #0
 8002166:	4606      	mov	r6, r0
 8002168:	db01      	blt.n	800216e <_malloc_r+0x1a>
 800216a:	42a9      	cmp	r1, r5
 800216c:	d903      	bls.n	8002176 <_malloc_r+0x22>
 800216e:	230c      	movs	r3, #12
 8002170:	6033      	str	r3, [r6, #0]
 8002172:	2000      	movs	r0, #0
 8002174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002176:	f000 fd63 	bl	8002c40 <__malloc_lock>
 800217a:	4921      	ldr	r1, [pc, #132]	; (8002200 <_malloc_r+0xac>)
 800217c:	680a      	ldr	r2, [r1, #0]
 800217e:	4614      	mov	r4, r2
 8002180:	b99c      	cbnz	r4, 80021aa <_malloc_r+0x56>
 8002182:	4f20      	ldr	r7, [pc, #128]	; (8002204 <_malloc_r+0xb0>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	b923      	cbnz	r3, 8002192 <_malloc_r+0x3e>
 8002188:	4621      	mov	r1, r4
 800218a:	4630      	mov	r0, r6
 800218c:	f000 fc86 	bl	8002a9c <_sbrk_r>
 8002190:	6038      	str	r0, [r7, #0]
 8002192:	4629      	mov	r1, r5
 8002194:	4630      	mov	r0, r6
 8002196:	f000 fc81 	bl	8002a9c <_sbrk_r>
 800219a:	1c43      	adds	r3, r0, #1
 800219c:	d123      	bne.n	80021e6 <_malloc_r+0x92>
 800219e:	230c      	movs	r3, #12
 80021a0:	6033      	str	r3, [r6, #0]
 80021a2:	4630      	mov	r0, r6
 80021a4:	f000 fd52 	bl	8002c4c <__malloc_unlock>
 80021a8:	e7e3      	b.n	8002172 <_malloc_r+0x1e>
 80021aa:	6823      	ldr	r3, [r4, #0]
 80021ac:	1b5b      	subs	r3, r3, r5
 80021ae:	d417      	bmi.n	80021e0 <_malloc_r+0x8c>
 80021b0:	2b0b      	cmp	r3, #11
 80021b2:	d903      	bls.n	80021bc <_malloc_r+0x68>
 80021b4:	6023      	str	r3, [r4, #0]
 80021b6:	441c      	add	r4, r3
 80021b8:	6025      	str	r5, [r4, #0]
 80021ba:	e004      	b.n	80021c6 <_malloc_r+0x72>
 80021bc:	6863      	ldr	r3, [r4, #4]
 80021be:	42a2      	cmp	r2, r4
 80021c0:	bf0c      	ite	eq
 80021c2:	600b      	streq	r3, [r1, #0]
 80021c4:	6053      	strne	r3, [r2, #4]
 80021c6:	4630      	mov	r0, r6
 80021c8:	f000 fd40 	bl	8002c4c <__malloc_unlock>
 80021cc:	f104 000b 	add.w	r0, r4, #11
 80021d0:	1d23      	adds	r3, r4, #4
 80021d2:	f020 0007 	bic.w	r0, r0, #7
 80021d6:	1ac2      	subs	r2, r0, r3
 80021d8:	d0cc      	beq.n	8002174 <_malloc_r+0x20>
 80021da:	1a1b      	subs	r3, r3, r0
 80021dc:	50a3      	str	r3, [r4, r2]
 80021de:	e7c9      	b.n	8002174 <_malloc_r+0x20>
 80021e0:	4622      	mov	r2, r4
 80021e2:	6864      	ldr	r4, [r4, #4]
 80021e4:	e7cc      	b.n	8002180 <_malloc_r+0x2c>
 80021e6:	1cc4      	adds	r4, r0, #3
 80021e8:	f024 0403 	bic.w	r4, r4, #3
 80021ec:	42a0      	cmp	r0, r4
 80021ee:	d0e3      	beq.n	80021b8 <_malloc_r+0x64>
 80021f0:	1a21      	subs	r1, r4, r0
 80021f2:	4630      	mov	r0, r6
 80021f4:	f000 fc52 	bl	8002a9c <_sbrk_r>
 80021f8:	3001      	adds	r0, #1
 80021fa:	d1dd      	bne.n	80021b8 <_malloc_r+0x64>
 80021fc:	e7cf      	b.n	800219e <_malloc_r+0x4a>
 80021fe:	bf00      	nop
 8002200:	20000098 	.word	0x20000098
 8002204:	2000009c 	.word	0x2000009c

08002208 <__ssputs_r>:
 8002208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800220c:	688e      	ldr	r6, [r1, #8]
 800220e:	429e      	cmp	r6, r3
 8002210:	4682      	mov	sl, r0
 8002212:	460c      	mov	r4, r1
 8002214:	4690      	mov	r8, r2
 8002216:	461f      	mov	r7, r3
 8002218:	d838      	bhi.n	800228c <__ssputs_r+0x84>
 800221a:	898a      	ldrh	r2, [r1, #12]
 800221c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002220:	d032      	beq.n	8002288 <__ssputs_r+0x80>
 8002222:	6825      	ldr	r5, [r4, #0]
 8002224:	6909      	ldr	r1, [r1, #16]
 8002226:	eba5 0901 	sub.w	r9, r5, r1
 800222a:	6965      	ldr	r5, [r4, #20]
 800222c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002230:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002234:	3301      	adds	r3, #1
 8002236:	444b      	add	r3, r9
 8002238:	106d      	asrs	r5, r5, #1
 800223a:	429d      	cmp	r5, r3
 800223c:	bf38      	it	cc
 800223e:	461d      	movcc	r5, r3
 8002240:	0553      	lsls	r3, r2, #21
 8002242:	d531      	bpl.n	80022a8 <__ssputs_r+0xa0>
 8002244:	4629      	mov	r1, r5
 8002246:	f7ff ff85 	bl	8002154 <_malloc_r>
 800224a:	4606      	mov	r6, r0
 800224c:	b950      	cbnz	r0, 8002264 <__ssputs_r+0x5c>
 800224e:	230c      	movs	r3, #12
 8002250:	f8ca 3000 	str.w	r3, [sl]
 8002254:	89a3      	ldrh	r3, [r4, #12]
 8002256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800225a:	81a3      	strh	r3, [r4, #12]
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002264:	6921      	ldr	r1, [r4, #16]
 8002266:	464a      	mov	r2, r9
 8002268:	f000 fcc2 	bl	8002bf0 <memcpy>
 800226c:	89a3      	ldrh	r3, [r4, #12]
 800226e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002276:	81a3      	strh	r3, [r4, #12]
 8002278:	6126      	str	r6, [r4, #16]
 800227a:	6165      	str	r5, [r4, #20]
 800227c:	444e      	add	r6, r9
 800227e:	eba5 0509 	sub.w	r5, r5, r9
 8002282:	6026      	str	r6, [r4, #0]
 8002284:	60a5      	str	r5, [r4, #8]
 8002286:	463e      	mov	r6, r7
 8002288:	42be      	cmp	r6, r7
 800228a:	d900      	bls.n	800228e <__ssputs_r+0x86>
 800228c:	463e      	mov	r6, r7
 800228e:	4632      	mov	r2, r6
 8002290:	6820      	ldr	r0, [r4, #0]
 8002292:	4641      	mov	r1, r8
 8002294:	f000 fcba 	bl	8002c0c <memmove>
 8002298:	68a3      	ldr	r3, [r4, #8]
 800229a:	6822      	ldr	r2, [r4, #0]
 800229c:	1b9b      	subs	r3, r3, r6
 800229e:	4432      	add	r2, r6
 80022a0:	60a3      	str	r3, [r4, #8]
 80022a2:	6022      	str	r2, [r4, #0]
 80022a4:	2000      	movs	r0, #0
 80022a6:	e7db      	b.n	8002260 <__ssputs_r+0x58>
 80022a8:	462a      	mov	r2, r5
 80022aa:	f000 fcd5 	bl	8002c58 <_realloc_r>
 80022ae:	4606      	mov	r6, r0
 80022b0:	2800      	cmp	r0, #0
 80022b2:	d1e1      	bne.n	8002278 <__ssputs_r+0x70>
 80022b4:	6921      	ldr	r1, [r4, #16]
 80022b6:	4650      	mov	r0, sl
 80022b8:	f7ff fefc 	bl	80020b4 <_free_r>
 80022bc:	e7c7      	b.n	800224e <__ssputs_r+0x46>
	...

080022c0 <_svfiprintf_r>:
 80022c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c4:	4698      	mov	r8, r3
 80022c6:	898b      	ldrh	r3, [r1, #12]
 80022c8:	061b      	lsls	r3, r3, #24
 80022ca:	b09d      	sub	sp, #116	; 0x74
 80022cc:	4607      	mov	r7, r0
 80022ce:	460d      	mov	r5, r1
 80022d0:	4614      	mov	r4, r2
 80022d2:	d50e      	bpl.n	80022f2 <_svfiprintf_r+0x32>
 80022d4:	690b      	ldr	r3, [r1, #16]
 80022d6:	b963      	cbnz	r3, 80022f2 <_svfiprintf_r+0x32>
 80022d8:	2140      	movs	r1, #64	; 0x40
 80022da:	f7ff ff3b 	bl	8002154 <_malloc_r>
 80022de:	6028      	str	r0, [r5, #0]
 80022e0:	6128      	str	r0, [r5, #16]
 80022e2:	b920      	cbnz	r0, 80022ee <_svfiprintf_r+0x2e>
 80022e4:	230c      	movs	r3, #12
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	e0d1      	b.n	8002492 <_svfiprintf_r+0x1d2>
 80022ee:	2340      	movs	r3, #64	; 0x40
 80022f0:	616b      	str	r3, [r5, #20]
 80022f2:	2300      	movs	r3, #0
 80022f4:	9309      	str	r3, [sp, #36]	; 0x24
 80022f6:	2320      	movs	r3, #32
 80022f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80022fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8002300:	2330      	movs	r3, #48	; 0x30
 8002302:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80024ac <_svfiprintf_r+0x1ec>
 8002306:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800230a:	f04f 0901 	mov.w	r9, #1
 800230e:	4623      	mov	r3, r4
 8002310:	469a      	mov	sl, r3
 8002312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002316:	b10a      	cbz	r2, 800231c <_svfiprintf_r+0x5c>
 8002318:	2a25      	cmp	r2, #37	; 0x25
 800231a:	d1f9      	bne.n	8002310 <_svfiprintf_r+0x50>
 800231c:	ebba 0b04 	subs.w	fp, sl, r4
 8002320:	d00b      	beq.n	800233a <_svfiprintf_r+0x7a>
 8002322:	465b      	mov	r3, fp
 8002324:	4622      	mov	r2, r4
 8002326:	4629      	mov	r1, r5
 8002328:	4638      	mov	r0, r7
 800232a:	f7ff ff6d 	bl	8002208 <__ssputs_r>
 800232e:	3001      	adds	r0, #1
 8002330:	f000 80aa 	beq.w	8002488 <_svfiprintf_r+0x1c8>
 8002334:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002336:	445a      	add	r2, fp
 8002338:	9209      	str	r2, [sp, #36]	; 0x24
 800233a:	f89a 3000 	ldrb.w	r3, [sl]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 80a2 	beq.w	8002488 <_svfiprintf_r+0x1c8>
 8002344:	2300      	movs	r3, #0
 8002346:	f04f 32ff 	mov.w	r2, #4294967295
 800234a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800234e:	f10a 0a01 	add.w	sl, sl, #1
 8002352:	9304      	str	r3, [sp, #16]
 8002354:	9307      	str	r3, [sp, #28]
 8002356:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800235a:	931a      	str	r3, [sp, #104]	; 0x68
 800235c:	4654      	mov	r4, sl
 800235e:	2205      	movs	r2, #5
 8002360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002364:	4851      	ldr	r0, [pc, #324]	; (80024ac <_svfiprintf_r+0x1ec>)
 8002366:	f7fd ff3b 	bl	80001e0 <memchr>
 800236a:	9a04      	ldr	r2, [sp, #16]
 800236c:	b9d8      	cbnz	r0, 80023a6 <_svfiprintf_r+0xe6>
 800236e:	06d0      	lsls	r0, r2, #27
 8002370:	bf44      	itt	mi
 8002372:	2320      	movmi	r3, #32
 8002374:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002378:	0711      	lsls	r1, r2, #28
 800237a:	bf44      	itt	mi
 800237c:	232b      	movmi	r3, #43	; 0x2b
 800237e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002382:	f89a 3000 	ldrb.w	r3, [sl]
 8002386:	2b2a      	cmp	r3, #42	; 0x2a
 8002388:	d015      	beq.n	80023b6 <_svfiprintf_r+0xf6>
 800238a:	9a07      	ldr	r2, [sp, #28]
 800238c:	4654      	mov	r4, sl
 800238e:	2000      	movs	r0, #0
 8002390:	f04f 0c0a 	mov.w	ip, #10
 8002394:	4621      	mov	r1, r4
 8002396:	f811 3b01 	ldrb.w	r3, [r1], #1
 800239a:	3b30      	subs	r3, #48	; 0x30
 800239c:	2b09      	cmp	r3, #9
 800239e:	d94e      	bls.n	800243e <_svfiprintf_r+0x17e>
 80023a0:	b1b0      	cbz	r0, 80023d0 <_svfiprintf_r+0x110>
 80023a2:	9207      	str	r2, [sp, #28]
 80023a4:	e014      	b.n	80023d0 <_svfiprintf_r+0x110>
 80023a6:	eba0 0308 	sub.w	r3, r0, r8
 80023aa:	fa09 f303 	lsl.w	r3, r9, r3
 80023ae:	4313      	orrs	r3, r2
 80023b0:	9304      	str	r3, [sp, #16]
 80023b2:	46a2      	mov	sl, r4
 80023b4:	e7d2      	b.n	800235c <_svfiprintf_r+0x9c>
 80023b6:	9b03      	ldr	r3, [sp, #12]
 80023b8:	1d19      	adds	r1, r3, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	9103      	str	r1, [sp, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	bfbb      	ittet	lt
 80023c2:	425b      	neglt	r3, r3
 80023c4:	f042 0202 	orrlt.w	r2, r2, #2
 80023c8:	9307      	strge	r3, [sp, #28]
 80023ca:	9307      	strlt	r3, [sp, #28]
 80023cc:	bfb8      	it	lt
 80023ce:	9204      	strlt	r2, [sp, #16]
 80023d0:	7823      	ldrb	r3, [r4, #0]
 80023d2:	2b2e      	cmp	r3, #46	; 0x2e
 80023d4:	d10c      	bne.n	80023f0 <_svfiprintf_r+0x130>
 80023d6:	7863      	ldrb	r3, [r4, #1]
 80023d8:	2b2a      	cmp	r3, #42	; 0x2a
 80023da:	d135      	bne.n	8002448 <_svfiprintf_r+0x188>
 80023dc:	9b03      	ldr	r3, [sp, #12]
 80023de:	1d1a      	adds	r2, r3, #4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	9203      	str	r2, [sp, #12]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bfb8      	it	lt
 80023e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80023ec:	3402      	adds	r4, #2
 80023ee:	9305      	str	r3, [sp, #20]
 80023f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80024bc <_svfiprintf_r+0x1fc>
 80023f4:	7821      	ldrb	r1, [r4, #0]
 80023f6:	2203      	movs	r2, #3
 80023f8:	4650      	mov	r0, sl
 80023fa:	f7fd fef1 	bl	80001e0 <memchr>
 80023fe:	b140      	cbz	r0, 8002412 <_svfiprintf_r+0x152>
 8002400:	2340      	movs	r3, #64	; 0x40
 8002402:	eba0 000a 	sub.w	r0, r0, sl
 8002406:	fa03 f000 	lsl.w	r0, r3, r0
 800240a:	9b04      	ldr	r3, [sp, #16]
 800240c:	4303      	orrs	r3, r0
 800240e:	3401      	adds	r4, #1
 8002410:	9304      	str	r3, [sp, #16]
 8002412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002416:	4826      	ldr	r0, [pc, #152]	; (80024b0 <_svfiprintf_r+0x1f0>)
 8002418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800241c:	2206      	movs	r2, #6
 800241e:	f7fd fedf 	bl	80001e0 <memchr>
 8002422:	2800      	cmp	r0, #0
 8002424:	d038      	beq.n	8002498 <_svfiprintf_r+0x1d8>
 8002426:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <_svfiprintf_r+0x1f4>)
 8002428:	bb1b      	cbnz	r3, 8002472 <_svfiprintf_r+0x1b2>
 800242a:	9b03      	ldr	r3, [sp, #12]
 800242c:	3307      	adds	r3, #7
 800242e:	f023 0307 	bic.w	r3, r3, #7
 8002432:	3308      	adds	r3, #8
 8002434:	9303      	str	r3, [sp, #12]
 8002436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002438:	4433      	add	r3, r6
 800243a:	9309      	str	r3, [sp, #36]	; 0x24
 800243c:	e767      	b.n	800230e <_svfiprintf_r+0x4e>
 800243e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002442:	460c      	mov	r4, r1
 8002444:	2001      	movs	r0, #1
 8002446:	e7a5      	b.n	8002394 <_svfiprintf_r+0xd4>
 8002448:	2300      	movs	r3, #0
 800244a:	3401      	adds	r4, #1
 800244c:	9305      	str	r3, [sp, #20]
 800244e:	4619      	mov	r1, r3
 8002450:	f04f 0c0a 	mov.w	ip, #10
 8002454:	4620      	mov	r0, r4
 8002456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800245a:	3a30      	subs	r2, #48	; 0x30
 800245c:	2a09      	cmp	r2, #9
 800245e:	d903      	bls.n	8002468 <_svfiprintf_r+0x1a8>
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0c5      	beq.n	80023f0 <_svfiprintf_r+0x130>
 8002464:	9105      	str	r1, [sp, #20]
 8002466:	e7c3      	b.n	80023f0 <_svfiprintf_r+0x130>
 8002468:	fb0c 2101 	mla	r1, ip, r1, r2
 800246c:	4604      	mov	r4, r0
 800246e:	2301      	movs	r3, #1
 8002470:	e7f0      	b.n	8002454 <_svfiprintf_r+0x194>
 8002472:	ab03      	add	r3, sp, #12
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	462a      	mov	r2, r5
 8002478:	4b0f      	ldr	r3, [pc, #60]	; (80024b8 <_svfiprintf_r+0x1f8>)
 800247a:	a904      	add	r1, sp, #16
 800247c:	4638      	mov	r0, r7
 800247e:	f3af 8000 	nop.w
 8002482:	1c42      	adds	r2, r0, #1
 8002484:	4606      	mov	r6, r0
 8002486:	d1d6      	bne.n	8002436 <_svfiprintf_r+0x176>
 8002488:	89ab      	ldrh	r3, [r5, #12]
 800248a:	065b      	lsls	r3, r3, #25
 800248c:	f53f af2c 	bmi.w	80022e8 <_svfiprintf_r+0x28>
 8002490:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002492:	b01d      	add	sp, #116	; 0x74
 8002494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002498:	ab03      	add	r3, sp, #12
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	462a      	mov	r2, r5
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <_svfiprintf_r+0x1f8>)
 80024a0:	a904      	add	r1, sp, #16
 80024a2:	4638      	mov	r0, r7
 80024a4:	f000 f9d4 	bl	8002850 <_printf_i>
 80024a8:	e7eb      	b.n	8002482 <_svfiprintf_r+0x1c2>
 80024aa:	bf00      	nop
 80024ac:	08002e98 	.word	0x08002e98
 80024b0:	08002ea2 	.word	0x08002ea2
 80024b4:	00000000 	.word	0x00000000
 80024b8:	08002209 	.word	0x08002209
 80024bc:	08002e9e 	.word	0x08002e9e

080024c0 <__sfputc_r>:
 80024c0:	6893      	ldr	r3, [r2, #8]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	b410      	push	{r4}
 80024c8:	6093      	str	r3, [r2, #8]
 80024ca:	da08      	bge.n	80024de <__sfputc_r+0x1e>
 80024cc:	6994      	ldr	r4, [r2, #24]
 80024ce:	42a3      	cmp	r3, r4
 80024d0:	db01      	blt.n	80024d6 <__sfputc_r+0x16>
 80024d2:	290a      	cmp	r1, #10
 80024d4:	d103      	bne.n	80024de <__sfputc_r+0x1e>
 80024d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024da:	f7ff bb0d 	b.w	8001af8 <__swbuf_r>
 80024de:	6813      	ldr	r3, [r2, #0]
 80024e0:	1c58      	adds	r0, r3, #1
 80024e2:	6010      	str	r0, [r2, #0]
 80024e4:	7019      	strb	r1, [r3, #0]
 80024e6:	4608      	mov	r0, r1
 80024e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <__sfputs_r>:
 80024ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f0:	4606      	mov	r6, r0
 80024f2:	460f      	mov	r7, r1
 80024f4:	4614      	mov	r4, r2
 80024f6:	18d5      	adds	r5, r2, r3
 80024f8:	42ac      	cmp	r4, r5
 80024fa:	d101      	bne.n	8002500 <__sfputs_r+0x12>
 80024fc:	2000      	movs	r0, #0
 80024fe:	e007      	b.n	8002510 <__sfputs_r+0x22>
 8002500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002504:	463a      	mov	r2, r7
 8002506:	4630      	mov	r0, r6
 8002508:	f7ff ffda 	bl	80024c0 <__sfputc_r>
 800250c:	1c43      	adds	r3, r0, #1
 800250e:	d1f3      	bne.n	80024f8 <__sfputs_r+0xa>
 8002510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002514 <_vfiprintf_r>:
 8002514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002518:	460d      	mov	r5, r1
 800251a:	b09d      	sub	sp, #116	; 0x74
 800251c:	4614      	mov	r4, r2
 800251e:	4698      	mov	r8, r3
 8002520:	4606      	mov	r6, r0
 8002522:	b118      	cbz	r0, 800252c <_vfiprintf_r+0x18>
 8002524:	6983      	ldr	r3, [r0, #24]
 8002526:	b90b      	cbnz	r3, 800252c <_vfiprintf_r+0x18>
 8002528:	f7ff fcc0 	bl	8001eac <__sinit>
 800252c:	4b89      	ldr	r3, [pc, #548]	; (8002754 <_vfiprintf_r+0x240>)
 800252e:	429d      	cmp	r5, r3
 8002530:	d11b      	bne.n	800256a <_vfiprintf_r+0x56>
 8002532:	6875      	ldr	r5, [r6, #4]
 8002534:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002536:	07d9      	lsls	r1, r3, #31
 8002538:	d405      	bmi.n	8002546 <_vfiprintf_r+0x32>
 800253a:	89ab      	ldrh	r3, [r5, #12]
 800253c:	059a      	lsls	r2, r3, #22
 800253e:	d402      	bmi.n	8002546 <_vfiprintf_r+0x32>
 8002540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002542:	f7ff fd51 	bl	8001fe8 <__retarget_lock_acquire_recursive>
 8002546:	89ab      	ldrh	r3, [r5, #12]
 8002548:	071b      	lsls	r3, r3, #28
 800254a:	d501      	bpl.n	8002550 <_vfiprintf_r+0x3c>
 800254c:	692b      	ldr	r3, [r5, #16]
 800254e:	b9eb      	cbnz	r3, 800258c <_vfiprintf_r+0x78>
 8002550:	4629      	mov	r1, r5
 8002552:	4630      	mov	r0, r6
 8002554:	f7ff fb22 	bl	8001b9c <__swsetup_r>
 8002558:	b1c0      	cbz	r0, 800258c <_vfiprintf_r+0x78>
 800255a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800255c:	07dc      	lsls	r4, r3, #31
 800255e:	d50e      	bpl.n	800257e <_vfiprintf_r+0x6a>
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	b01d      	add	sp, #116	; 0x74
 8002566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800256a:	4b7b      	ldr	r3, [pc, #492]	; (8002758 <_vfiprintf_r+0x244>)
 800256c:	429d      	cmp	r5, r3
 800256e:	d101      	bne.n	8002574 <_vfiprintf_r+0x60>
 8002570:	68b5      	ldr	r5, [r6, #8]
 8002572:	e7df      	b.n	8002534 <_vfiprintf_r+0x20>
 8002574:	4b79      	ldr	r3, [pc, #484]	; (800275c <_vfiprintf_r+0x248>)
 8002576:	429d      	cmp	r5, r3
 8002578:	bf08      	it	eq
 800257a:	68f5      	ldreq	r5, [r6, #12]
 800257c:	e7da      	b.n	8002534 <_vfiprintf_r+0x20>
 800257e:	89ab      	ldrh	r3, [r5, #12]
 8002580:	0598      	lsls	r0, r3, #22
 8002582:	d4ed      	bmi.n	8002560 <_vfiprintf_r+0x4c>
 8002584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002586:	f7ff fd30 	bl	8001fea <__retarget_lock_release_recursive>
 800258a:	e7e9      	b.n	8002560 <_vfiprintf_r+0x4c>
 800258c:	2300      	movs	r3, #0
 800258e:	9309      	str	r3, [sp, #36]	; 0x24
 8002590:	2320      	movs	r3, #32
 8002592:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002596:	f8cd 800c 	str.w	r8, [sp, #12]
 800259a:	2330      	movs	r3, #48	; 0x30
 800259c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002760 <_vfiprintf_r+0x24c>
 80025a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025a4:	f04f 0901 	mov.w	r9, #1
 80025a8:	4623      	mov	r3, r4
 80025aa:	469a      	mov	sl, r3
 80025ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80025b0:	b10a      	cbz	r2, 80025b6 <_vfiprintf_r+0xa2>
 80025b2:	2a25      	cmp	r2, #37	; 0x25
 80025b4:	d1f9      	bne.n	80025aa <_vfiprintf_r+0x96>
 80025b6:	ebba 0b04 	subs.w	fp, sl, r4
 80025ba:	d00b      	beq.n	80025d4 <_vfiprintf_r+0xc0>
 80025bc:	465b      	mov	r3, fp
 80025be:	4622      	mov	r2, r4
 80025c0:	4629      	mov	r1, r5
 80025c2:	4630      	mov	r0, r6
 80025c4:	f7ff ff93 	bl	80024ee <__sfputs_r>
 80025c8:	3001      	adds	r0, #1
 80025ca:	f000 80aa 	beq.w	8002722 <_vfiprintf_r+0x20e>
 80025ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025d0:	445a      	add	r2, fp
 80025d2:	9209      	str	r2, [sp, #36]	; 0x24
 80025d4:	f89a 3000 	ldrb.w	r3, [sl]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80a2 	beq.w	8002722 <_vfiprintf_r+0x20e>
 80025de:	2300      	movs	r3, #0
 80025e0:	f04f 32ff 	mov.w	r2, #4294967295
 80025e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80025e8:	f10a 0a01 	add.w	sl, sl, #1
 80025ec:	9304      	str	r3, [sp, #16]
 80025ee:	9307      	str	r3, [sp, #28]
 80025f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80025f4:	931a      	str	r3, [sp, #104]	; 0x68
 80025f6:	4654      	mov	r4, sl
 80025f8:	2205      	movs	r2, #5
 80025fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80025fe:	4858      	ldr	r0, [pc, #352]	; (8002760 <_vfiprintf_r+0x24c>)
 8002600:	f7fd fdee 	bl	80001e0 <memchr>
 8002604:	9a04      	ldr	r2, [sp, #16]
 8002606:	b9d8      	cbnz	r0, 8002640 <_vfiprintf_r+0x12c>
 8002608:	06d1      	lsls	r1, r2, #27
 800260a:	bf44      	itt	mi
 800260c:	2320      	movmi	r3, #32
 800260e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002612:	0713      	lsls	r3, r2, #28
 8002614:	bf44      	itt	mi
 8002616:	232b      	movmi	r3, #43	; 0x2b
 8002618:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800261c:	f89a 3000 	ldrb.w	r3, [sl]
 8002620:	2b2a      	cmp	r3, #42	; 0x2a
 8002622:	d015      	beq.n	8002650 <_vfiprintf_r+0x13c>
 8002624:	9a07      	ldr	r2, [sp, #28]
 8002626:	4654      	mov	r4, sl
 8002628:	2000      	movs	r0, #0
 800262a:	f04f 0c0a 	mov.w	ip, #10
 800262e:	4621      	mov	r1, r4
 8002630:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002634:	3b30      	subs	r3, #48	; 0x30
 8002636:	2b09      	cmp	r3, #9
 8002638:	d94e      	bls.n	80026d8 <_vfiprintf_r+0x1c4>
 800263a:	b1b0      	cbz	r0, 800266a <_vfiprintf_r+0x156>
 800263c:	9207      	str	r2, [sp, #28]
 800263e:	e014      	b.n	800266a <_vfiprintf_r+0x156>
 8002640:	eba0 0308 	sub.w	r3, r0, r8
 8002644:	fa09 f303 	lsl.w	r3, r9, r3
 8002648:	4313      	orrs	r3, r2
 800264a:	9304      	str	r3, [sp, #16]
 800264c:	46a2      	mov	sl, r4
 800264e:	e7d2      	b.n	80025f6 <_vfiprintf_r+0xe2>
 8002650:	9b03      	ldr	r3, [sp, #12]
 8002652:	1d19      	adds	r1, r3, #4
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	9103      	str	r1, [sp, #12]
 8002658:	2b00      	cmp	r3, #0
 800265a:	bfbb      	ittet	lt
 800265c:	425b      	neglt	r3, r3
 800265e:	f042 0202 	orrlt.w	r2, r2, #2
 8002662:	9307      	strge	r3, [sp, #28]
 8002664:	9307      	strlt	r3, [sp, #28]
 8002666:	bfb8      	it	lt
 8002668:	9204      	strlt	r2, [sp, #16]
 800266a:	7823      	ldrb	r3, [r4, #0]
 800266c:	2b2e      	cmp	r3, #46	; 0x2e
 800266e:	d10c      	bne.n	800268a <_vfiprintf_r+0x176>
 8002670:	7863      	ldrb	r3, [r4, #1]
 8002672:	2b2a      	cmp	r3, #42	; 0x2a
 8002674:	d135      	bne.n	80026e2 <_vfiprintf_r+0x1ce>
 8002676:	9b03      	ldr	r3, [sp, #12]
 8002678:	1d1a      	adds	r2, r3, #4
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	9203      	str	r2, [sp, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	bfb8      	it	lt
 8002682:	f04f 33ff 	movlt.w	r3, #4294967295
 8002686:	3402      	adds	r4, #2
 8002688:	9305      	str	r3, [sp, #20]
 800268a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002770 <_vfiprintf_r+0x25c>
 800268e:	7821      	ldrb	r1, [r4, #0]
 8002690:	2203      	movs	r2, #3
 8002692:	4650      	mov	r0, sl
 8002694:	f7fd fda4 	bl	80001e0 <memchr>
 8002698:	b140      	cbz	r0, 80026ac <_vfiprintf_r+0x198>
 800269a:	2340      	movs	r3, #64	; 0x40
 800269c:	eba0 000a 	sub.w	r0, r0, sl
 80026a0:	fa03 f000 	lsl.w	r0, r3, r0
 80026a4:	9b04      	ldr	r3, [sp, #16]
 80026a6:	4303      	orrs	r3, r0
 80026a8:	3401      	adds	r4, #1
 80026aa:	9304      	str	r3, [sp, #16]
 80026ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80026b0:	482c      	ldr	r0, [pc, #176]	; (8002764 <_vfiprintf_r+0x250>)
 80026b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80026b6:	2206      	movs	r2, #6
 80026b8:	f7fd fd92 	bl	80001e0 <memchr>
 80026bc:	2800      	cmp	r0, #0
 80026be:	d03f      	beq.n	8002740 <_vfiprintf_r+0x22c>
 80026c0:	4b29      	ldr	r3, [pc, #164]	; (8002768 <_vfiprintf_r+0x254>)
 80026c2:	bb1b      	cbnz	r3, 800270c <_vfiprintf_r+0x1f8>
 80026c4:	9b03      	ldr	r3, [sp, #12]
 80026c6:	3307      	adds	r3, #7
 80026c8:	f023 0307 	bic.w	r3, r3, #7
 80026cc:	3308      	adds	r3, #8
 80026ce:	9303      	str	r3, [sp, #12]
 80026d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80026d2:	443b      	add	r3, r7
 80026d4:	9309      	str	r3, [sp, #36]	; 0x24
 80026d6:	e767      	b.n	80025a8 <_vfiprintf_r+0x94>
 80026d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80026dc:	460c      	mov	r4, r1
 80026de:	2001      	movs	r0, #1
 80026e0:	e7a5      	b.n	800262e <_vfiprintf_r+0x11a>
 80026e2:	2300      	movs	r3, #0
 80026e4:	3401      	adds	r4, #1
 80026e6:	9305      	str	r3, [sp, #20]
 80026e8:	4619      	mov	r1, r3
 80026ea:	f04f 0c0a 	mov.w	ip, #10
 80026ee:	4620      	mov	r0, r4
 80026f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80026f4:	3a30      	subs	r2, #48	; 0x30
 80026f6:	2a09      	cmp	r2, #9
 80026f8:	d903      	bls.n	8002702 <_vfiprintf_r+0x1ee>
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0c5      	beq.n	800268a <_vfiprintf_r+0x176>
 80026fe:	9105      	str	r1, [sp, #20]
 8002700:	e7c3      	b.n	800268a <_vfiprintf_r+0x176>
 8002702:	fb0c 2101 	mla	r1, ip, r1, r2
 8002706:	4604      	mov	r4, r0
 8002708:	2301      	movs	r3, #1
 800270a:	e7f0      	b.n	80026ee <_vfiprintf_r+0x1da>
 800270c:	ab03      	add	r3, sp, #12
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	462a      	mov	r2, r5
 8002712:	4b16      	ldr	r3, [pc, #88]	; (800276c <_vfiprintf_r+0x258>)
 8002714:	a904      	add	r1, sp, #16
 8002716:	4630      	mov	r0, r6
 8002718:	f3af 8000 	nop.w
 800271c:	4607      	mov	r7, r0
 800271e:	1c78      	adds	r0, r7, #1
 8002720:	d1d6      	bne.n	80026d0 <_vfiprintf_r+0x1bc>
 8002722:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002724:	07d9      	lsls	r1, r3, #31
 8002726:	d405      	bmi.n	8002734 <_vfiprintf_r+0x220>
 8002728:	89ab      	ldrh	r3, [r5, #12]
 800272a:	059a      	lsls	r2, r3, #22
 800272c:	d402      	bmi.n	8002734 <_vfiprintf_r+0x220>
 800272e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002730:	f7ff fc5b 	bl	8001fea <__retarget_lock_release_recursive>
 8002734:	89ab      	ldrh	r3, [r5, #12]
 8002736:	065b      	lsls	r3, r3, #25
 8002738:	f53f af12 	bmi.w	8002560 <_vfiprintf_r+0x4c>
 800273c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800273e:	e711      	b.n	8002564 <_vfiprintf_r+0x50>
 8002740:	ab03      	add	r3, sp, #12
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	462a      	mov	r2, r5
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <_vfiprintf_r+0x258>)
 8002748:	a904      	add	r1, sp, #16
 800274a:	4630      	mov	r0, r6
 800274c:	f000 f880 	bl	8002850 <_printf_i>
 8002750:	e7e4      	b.n	800271c <_vfiprintf_r+0x208>
 8002752:	bf00      	nop
 8002754:	08002e58 	.word	0x08002e58
 8002758:	08002e78 	.word	0x08002e78
 800275c:	08002e38 	.word	0x08002e38
 8002760:	08002e98 	.word	0x08002e98
 8002764:	08002ea2 	.word	0x08002ea2
 8002768:	00000000 	.word	0x00000000
 800276c:	080024ef 	.word	0x080024ef
 8002770:	08002e9e 	.word	0x08002e9e

08002774 <_printf_common>:
 8002774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002778:	4616      	mov	r6, r2
 800277a:	4699      	mov	r9, r3
 800277c:	688a      	ldr	r2, [r1, #8]
 800277e:	690b      	ldr	r3, [r1, #16]
 8002780:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002784:	4293      	cmp	r3, r2
 8002786:	bfb8      	it	lt
 8002788:	4613      	movlt	r3, r2
 800278a:	6033      	str	r3, [r6, #0]
 800278c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002790:	4607      	mov	r7, r0
 8002792:	460c      	mov	r4, r1
 8002794:	b10a      	cbz	r2, 800279a <_printf_common+0x26>
 8002796:	3301      	adds	r3, #1
 8002798:	6033      	str	r3, [r6, #0]
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	0699      	lsls	r1, r3, #26
 800279e:	bf42      	ittt	mi
 80027a0:	6833      	ldrmi	r3, [r6, #0]
 80027a2:	3302      	addmi	r3, #2
 80027a4:	6033      	strmi	r3, [r6, #0]
 80027a6:	6825      	ldr	r5, [r4, #0]
 80027a8:	f015 0506 	ands.w	r5, r5, #6
 80027ac:	d106      	bne.n	80027bc <_printf_common+0x48>
 80027ae:	f104 0a19 	add.w	sl, r4, #25
 80027b2:	68e3      	ldr	r3, [r4, #12]
 80027b4:	6832      	ldr	r2, [r6, #0]
 80027b6:	1a9b      	subs	r3, r3, r2
 80027b8:	42ab      	cmp	r3, r5
 80027ba:	dc26      	bgt.n	800280a <_printf_common+0x96>
 80027bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027c0:	1e13      	subs	r3, r2, #0
 80027c2:	6822      	ldr	r2, [r4, #0]
 80027c4:	bf18      	it	ne
 80027c6:	2301      	movne	r3, #1
 80027c8:	0692      	lsls	r2, r2, #26
 80027ca:	d42b      	bmi.n	8002824 <_printf_common+0xb0>
 80027cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80027d0:	4649      	mov	r1, r9
 80027d2:	4638      	mov	r0, r7
 80027d4:	47c0      	blx	r8
 80027d6:	3001      	adds	r0, #1
 80027d8:	d01e      	beq.n	8002818 <_printf_common+0xa4>
 80027da:	6823      	ldr	r3, [r4, #0]
 80027dc:	68e5      	ldr	r5, [r4, #12]
 80027de:	6832      	ldr	r2, [r6, #0]
 80027e0:	f003 0306 	and.w	r3, r3, #6
 80027e4:	2b04      	cmp	r3, #4
 80027e6:	bf08      	it	eq
 80027e8:	1aad      	subeq	r5, r5, r2
 80027ea:	68a3      	ldr	r3, [r4, #8]
 80027ec:	6922      	ldr	r2, [r4, #16]
 80027ee:	bf0c      	ite	eq
 80027f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80027f4:	2500      	movne	r5, #0
 80027f6:	4293      	cmp	r3, r2
 80027f8:	bfc4      	itt	gt
 80027fa:	1a9b      	subgt	r3, r3, r2
 80027fc:	18ed      	addgt	r5, r5, r3
 80027fe:	2600      	movs	r6, #0
 8002800:	341a      	adds	r4, #26
 8002802:	42b5      	cmp	r5, r6
 8002804:	d11a      	bne.n	800283c <_printf_common+0xc8>
 8002806:	2000      	movs	r0, #0
 8002808:	e008      	b.n	800281c <_printf_common+0xa8>
 800280a:	2301      	movs	r3, #1
 800280c:	4652      	mov	r2, sl
 800280e:	4649      	mov	r1, r9
 8002810:	4638      	mov	r0, r7
 8002812:	47c0      	blx	r8
 8002814:	3001      	adds	r0, #1
 8002816:	d103      	bne.n	8002820 <_printf_common+0xac>
 8002818:	f04f 30ff 	mov.w	r0, #4294967295
 800281c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002820:	3501      	adds	r5, #1
 8002822:	e7c6      	b.n	80027b2 <_printf_common+0x3e>
 8002824:	18e1      	adds	r1, r4, r3
 8002826:	1c5a      	adds	r2, r3, #1
 8002828:	2030      	movs	r0, #48	; 0x30
 800282a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800282e:	4422      	add	r2, r4
 8002830:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002834:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002838:	3302      	adds	r3, #2
 800283a:	e7c7      	b.n	80027cc <_printf_common+0x58>
 800283c:	2301      	movs	r3, #1
 800283e:	4622      	mov	r2, r4
 8002840:	4649      	mov	r1, r9
 8002842:	4638      	mov	r0, r7
 8002844:	47c0      	blx	r8
 8002846:	3001      	adds	r0, #1
 8002848:	d0e6      	beq.n	8002818 <_printf_common+0xa4>
 800284a:	3601      	adds	r6, #1
 800284c:	e7d9      	b.n	8002802 <_printf_common+0x8e>
	...

08002850 <_printf_i>:
 8002850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002854:	460c      	mov	r4, r1
 8002856:	4691      	mov	r9, r2
 8002858:	7e27      	ldrb	r7, [r4, #24]
 800285a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800285c:	2f78      	cmp	r7, #120	; 0x78
 800285e:	4680      	mov	r8, r0
 8002860:	469a      	mov	sl, r3
 8002862:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002866:	d807      	bhi.n	8002878 <_printf_i+0x28>
 8002868:	2f62      	cmp	r7, #98	; 0x62
 800286a:	d80a      	bhi.n	8002882 <_printf_i+0x32>
 800286c:	2f00      	cmp	r7, #0
 800286e:	f000 80d8 	beq.w	8002a22 <_printf_i+0x1d2>
 8002872:	2f58      	cmp	r7, #88	; 0x58
 8002874:	f000 80a3 	beq.w	80029be <_printf_i+0x16e>
 8002878:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800287c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002880:	e03a      	b.n	80028f8 <_printf_i+0xa8>
 8002882:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002886:	2b15      	cmp	r3, #21
 8002888:	d8f6      	bhi.n	8002878 <_printf_i+0x28>
 800288a:	a001      	add	r0, pc, #4	; (adr r0, 8002890 <_printf_i+0x40>)
 800288c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002890:	080028e9 	.word	0x080028e9
 8002894:	080028fd 	.word	0x080028fd
 8002898:	08002879 	.word	0x08002879
 800289c:	08002879 	.word	0x08002879
 80028a0:	08002879 	.word	0x08002879
 80028a4:	08002879 	.word	0x08002879
 80028a8:	080028fd 	.word	0x080028fd
 80028ac:	08002879 	.word	0x08002879
 80028b0:	08002879 	.word	0x08002879
 80028b4:	08002879 	.word	0x08002879
 80028b8:	08002879 	.word	0x08002879
 80028bc:	08002a09 	.word	0x08002a09
 80028c0:	0800292d 	.word	0x0800292d
 80028c4:	080029eb 	.word	0x080029eb
 80028c8:	08002879 	.word	0x08002879
 80028cc:	08002879 	.word	0x08002879
 80028d0:	08002a2b 	.word	0x08002a2b
 80028d4:	08002879 	.word	0x08002879
 80028d8:	0800292d 	.word	0x0800292d
 80028dc:	08002879 	.word	0x08002879
 80028e0:	08002879 	.word	0x08002879
 80028e4:	080029f3 	.word	0x080029f3
 80028e8:	680b      	ldr	r3, [r1, #0]
 80028ea:	1d1a      	adds	r2, r3, #4
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	600a      	str	r2, [r1, #0]
 80028f0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80028f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0a3      	b.n	8002a44 <_printf_i+0x1f4>
 80028fc:	6825      	ldr	r5, [r4, #0]
 80028fe:	6808      	ldr	r0, [r1, #0]
 8002900:	062e      	lsls	r6, r5, #24
 8002902:	f100 0304 	add.w	r3, r0, #4
 8002906:	d50a      	bpl.n	800291e <_printf_i+0xce>
 8002908:	6805      	ldr	r5, [r0, #0]
 800290a:	600b      	str	r3, [r1, #0]
 800290c:	2d00      	cmp	r5, #0
 800290e:	da03      	bge.n	8002918 <_printf_i+0xc8>
 8002910:	232d      	movs	r3, #45	; 0x2d
 8002912:	426d      	negs	r5, r5
 8002914:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002918:	485e      	ldr	r0, [pc, #376]	; (8002a94 <_printf_i+0x244>)
 800291a:	230a      	movs	r3, #10
 800291c:	e019      	b.n	8002952 <_printf_i+0x102>
 800291e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002922:	6805      	ldr	r5, [r0, #0]
 8002924:	600b      	str	r3, [r1, #0]
 8002926:	bf18      	it	ne
 8002928:	b22d      	sxthne	r5, r5
 800292a:	e7ef      	b.n	800290c <_printf_i+0xbc>
 800292c:	680b      	ldr	r3, [r1, #0]
 800292e:	6825      	ldr	r5, [r4, #0]
 8002930:	1d18      	adds	r0, r3, #4
 8002932:	6008      	str	r0, [r1, #0]
 8002934:	0628      	lsls	r0, r5, #24
 8002936:	d501      	bpl.n	800293c <_printf_i+0xec>
 8002938:	681d      	ldr	r5, [r3, #0]
 800293a:	e002      	b.n	8002942 <_printf_i+0xf2>
 800293c:	0669      	lsls	r1, r5, #25
 800293e:	d5fb      	bpl.n	8002938 <_printf_i+0xe8>
 8002940:	881d      	ldrh	r5, [r3, #0]
 8002942:	4854      	ldr	r0, [pc, #336]	; (8002a94 <_printf_i+0x244>)
 8002944:	2f6f      	cmp	r7, #111	; 0x6f
 8002946:	bf0c      	ite	eq
 8002948:	2308      	moveq	r3, #8
 800294a:	230a      	movne	r3, #10
 800294c:	2100      	movs	r1, #0
 800294e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002952:	6866      	ldr	r6, [r4, #4]
 8002954:	60a6      	str	r6, [r4, #8]
 8002956:	2e00      	cmp	r6, #0
 8002958:	bfa2      	ittt	ge
 800295a:	6821      	ldrge	r1, [r4, #0]
 800295c:	f021 0104 	bicge.w	r1, r1, #4
 8002960:	6021      	strge	r1, [r4, #0]
 8002962:	b90d      	cbnz	r5, 8002968 <_printf_i+0x118>
 8002964:	2e00      	cmp	r6, #0
 8002966:	d04d      	beq.n	8002a04 <_printf_i+0x1b4>
 8002968:	4616      	mov	r6, r2
 800296a:	fbb5 f1f3 	udiv	r1, r5, r3
 800296e:	fb03 5711 	mls	r7, r3, r1, r5
 8002972:	5dc7      	ldrb	r7, [r0, r7]
 8002974:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002978:	462f      	mov	r7, r5
 800297a:	42bb      	cmp	r3, r7
 800297c:	460d      	mov	r5, r1
 800297e:	d9f4      	bls.n	800296a <_printf_i+0x11a>
 8002980:	2b08      	cmp	r3, #8
 8002982:	d10b      	bne.n	800299c <_printf_i+0x14c>
 8002984:	6823      	ldr	r3, [r4, #0]
 8002986:	07df      	lsls	r7, r3, #31
 8002988:	d508      	bpl.n	800299c <_printf_i+0x14c>
 800298a:	6923      	ldr	r3, [r4, #16]
 800298c:	6861      	ldr	r1, [r4, #4]
 800298e:	4299      	cmp	r1, r3
 8002990:	bfde      	ittt	le
 8002992:	2330      	movle	r3, #48	; 0x30
 8002994:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002998:	f106 36ff 	addle.w	r6, r6, #4294967295
 800299c:	1b92      	subs	r2, r2, r6
 800299e:	6122      	str	r2, [r4, #16]
 80029a0:	f8cd a000 	str.w	sl, [sp]
 80029a4:	464b      	mov	r3, r9
 80029a6:	aa03      	add	r2, sp, #12
 80029a8:	4621      	mov	r1, r4
 80029aa:	4640      	mov	r0, r8
 80029ac:	f7ff fee2 	bl	8002774 <_printf_common>
 80029b0:	3001      	adds	r0, #1
 80029b2:	d14c      	bne.n	8002a4e <_printf_i+0x1fe>
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295
 80029b8:	b004      	add	sp, #16
 80029ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029be:	4835      	ldr	r0, [pc, #212]	; (8002a94 <_printf_i+0x244>)
 80029c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	680e      	ldr	r6, [r1, #0]
 80029c8:	061f      	lsls	r7, r3, #24
 80029ca:	f856 5b04 	ldr.w	r5, [r6], #4
 80029ce:	600e      	str	r6, [r1, #0]
 80029d0:	d514      	bpl.n	80029fc <_printf_i+0x1ac>
 80029d2:	07d9      	lsls	r1, r3, #31
 80029d4:	bf44      	itt	mi
 80029d6:	f043 0320 	orrmi.w	r3, r3, #32
 80029da:	6023      	strmi	r3, [r4, #0]
 80029dc:	b91d      	cbnz	r5, 80029e6 <_printf_i+0x196>
 80029de:	6823      	ldr	r3, [r4, #0]
 80029e0:	f023 0320 	bic.w	r3, r3, #32
 80029e4:	6023      	str	r3, [r4, #0]
 80029e6:	2310      	movs	r3, #16
 80029e8:	e7b0      	b.n	800294c <_printf_i+0xfc>
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	f043 0320 	orr.w	r3, r3, #32
 80029f0:	6023      	str	r3, [r4, #0]
 80029f2:	2378      	movs	r3, #120	; 0x78
 80029f4:	4828      	ldr	r0, [pc, #160]	; (8002a98 <_printf_i+0x248>)
 80029f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80029fa:	e7e3      	b.n	80029c4 <_printf_i+0x174>
 80029fc:	065e      	lsls	r6, r3, #25
 80029fe:	bf48      	it	mi
 8002a00:	b2ad      	uxthmi	r5, r5
 8002a02:	e7e6      	b.n	80029d2 <_printf_i+0x182>
 8002a04:	4616      	mov	r6, r2
 8002a06:	e7bb      	b.n	8002980 <_printf_i+0x130>
 8002a08:	680b      	ldr	r3, [r1, #0]
 8002a0a:	6826      	ldr	r6, [r4, #0]
 8002a0c:	6960      	ldr	r0, [r4, #20]
 8002a0e:	1d1d      	adds	r5, r3, #4
 8002a10:	600d      	str	r5, [r1, #0]
 8002a12:	0635      	lsls	r5, r6, #24
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	d501      	bpl.n	8002a1c <_printf_i+0x1cc>
 8002a18:	6018      	str	r0, [r3, #0]
 8002a1a:	e002      	b.n	8002a22 <_printf_i+0x1d2>
 8002a1c:	0671      	lsls	r1, r6, #25
 8002a1e:	d5fb      	bpl.n	8002a18 <_printf_i+0x1c8>
 8002a20:	8018      	strh	r0, [r3, #0]
 8002a22:	2300      	movs	r3, #0
 8002a24:	6123      	str	r3, [r4, #16]
 8002a26:	4616      	mov	r6, r2
 8002a28:	e7ba      	b.n	80029a0 <_printf_i+0x150>
 8002a2a:	680b      	ldr	r3, [r1, #0]
 8002a2c:	1d1a      	adds	r2, r3, #4
 8002a2e:	600a      	str	r2, [r1, #0]
 8002a30:	681e      	ldr	r6, [r3, #0]
 8002a32:	6862      	ldr	r2, [r4, #4]
 8002a34:	2100      	movs	r1, #0
 8002a36:	4630      	mov	r0, r6
 8002a38:	f7fd fbd2 	bl	80001e0 <memchr>
 8002a3c:	b108      	cbz	r0, 8002a42 <_printf_i+0x1f2>
 8002a3e:	1b80      	subs	r0, r0, r6
 8002a40:	6060      	str	r0, [r4, #4]
 8002a42:	6863      	ldr	r3, [r4, #4]
 8002a44:	6123      	str	r3, [r4, #16]
 8002a46:	2300      	movs	r3, #0
 8002a48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a4c:	e7a8      	b.n	80029a0 <_printf_i+0x150>
 8002a4e:	6923      	ldr	r3, [r4, #16]
 8002a50:	4632      	mov	r2, r6
 8002a52:	4649      	mov	r1, r9
 8002a54:	4640      	mov	r0, r8
 8002a56:	47d0      	blx	sl
 8002a58:	3001      	adds	r0, #1
 8002a5a:	d0ab      	beq.n	80029b4 <_printf_i+0x164>
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	079b      	lsls	r3, r3, #30
 8002a60:	d413      	bmi.n	8002a8a <_printf_i+0x23a>
 8002a62:	68e0      	ldr	r0, [r4, #12]
 8002a64:	9b03      	ldr	r3, [sp, #12]
 8002a66:	4298      	cmp	r0, r3
 8002a68:	bfb8      	it	lt
 8002a6a:	4618      	movlt	r0, r3
 8002a6c:	e7a4      	b.n	80029b8 <_printf_i+0x168>
 8002a6e:	2301      	movs	r3, #1
 8002a70:	4632      	mov	r2, r6
 8002a72:	4649      	mov	r1, r9
 8002a74:	4640      	mov	r0, r8
 8002a76:	47d0      	blx	sl
 8002a78:	3001      	adds	r0, #1
 8002a7a:	d09b      	beq.n	80029b4 <_printf_i+0x164>
 8002a7c:	3501      	adds	r5, #1
 8002a7e:	68e3      	ldr	r3, [r4, #12]
 8002a80:	9903      	ldr	r1, [sp, #12]
 8002a82:	1a5b      	subs	r3, r3, r1
 8002a84:	42ab      	cmp	r3, r5
 8002a86:	dcf2      	bgt.n	8002a6e <_printf_i+0x21e>
 8002a88:	e7eb      	b.n	8002a62 <_printf_i+0x212>
 8002a8a:	2500      	movs	r5, #0
 8002a8c:	f104 0619 	add.w	r6, r4, #25
 8002a90:	e7f5      	b.n	8002a7e <_printf_i+0x22e>
 8002a92:	bf00      	nop
 8002a94:	08002ea9 	.word	0x08002ea9
 8002a98:	08002eba 	.word	0x08002eba

08002a9c <_sbrk_r>:
 8002a9c:	b538      	push	{r3, r4, r5, lr}
 8002a9e:	4d06      	ldr	r5, [pc, #24]	; (8002ab8 <_sbrk_r+0x1c>)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	4608      	mov	r0, r1
 8002aa6:	602b      	str	r3, [r5, #0]
 8002aa8:	f000 f93e 	bl	8002d28 <_sbrk>
 8002aac:	1c43      	adds	r3, r0, #1
 8002aae:	d102      	bne.n	8002ab6 <_sbrk_r+0x1a>
 8002ab0:	682b      	ldr	r3, [r5, #0]
 8002ab2:	b103      	cbz	r3, 8002ab6 <_sbrk_r+0x1a>
 8002ab4:	6023      	str	r3, [r4, #0]
 8002ab6:	bd38      	pop	{r3, r4, r5, pc}
 8002ab8:	20000240 	.word	0x20000240

08002abc <__sread>:
 8002abc:	b510      	push	{r4, lr}
 8002abe:	460c      	mov	r4, r1
 8002ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ac4:	f000 f8ee 	bl	8002ca4 <_read_r>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	bfab      	itete	ge
 8002acc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ace:	89a3      	ldrhlt	r3, [r4, #12]
 8002ad0:	181b      	addge	r3, r3, r0
 8002ad2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ad6:	bfac      	ite	ge
 8002ad8:	6563      	strge	r3, [r4, #84]	; 0x54
 8002ada:	81a3      	strhlt	r3, [r4, #12]
 8002adc:	bd10      	pop	{r4, pc}

08002ade <__swrite>:
 8002ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ae2:	461f      	mov	r7, r3
 8002ae4:	898b      	ldrh	r3, [r1, #12]
 8002ae6:	05db      	lsls	r3, r3, #23
 8002ae8:	4605      	mov	r5, r0
 8002aea:	460c      	mov	r4, r1
 8002aec:	4616      	mov	r6, r2
 8002aee:	d505      	bpl.n	8002afc <__swrite+0x1e>
 8002af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002af4:	2302      	movs	r3, #2
 8002af6:	2200      	movs	r2, #0
 8002af8:	f000 f868 	bl	8002bcc <_lseek_r>
 8002afc:	89a3      	ldrh	r3, [r4, #12]
 8002afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b06:	81a3      	strh	r3, [r4, #12]
 8002b08:	4632      	mov	r2, r6
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b12:	f000 b817 	b.w	8002b44 <_write_r>

08002b16 <__sseek>:
 8002b16:	b510      	push	{r4, lr}
 8002b18:	460c      	mov	r4, r1
 8002b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b1e:	f000 f855 	bl	8002bcc <_lseek_r>
 8002b22:	1c43      	adds	r3, r0, #1
 8002b24:	89a3      	ldrh	r3, [r4, #12]
 8002b26:	bf15      	itete	ne
 8002b28:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b32:	81a3      	strheq	r3, [r4, #12]
 8002b34:	bf18      	it	ne
 8002b36:	81a3      	strhne	r3, [r4, #12]
 8002b38:	bd10      	pop	{r4, pc}

08002b3a <__sclose>:
 8002b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b3e:	f000 b813 	b.w	8002b68 <_close_r>
	...

08002b44 <_write_r>:
 8002b44:	b538      	push	{r3, r4, r5, lr}
 8002b46:	4d07      	ldr	r5, [pc, #28]	; (8002b64 <_write_r+0x20>)
 8002b48:	4604      	mov	r4, r0
 8002b4a:	4608      	mov	r0, r1
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	2200      	movs	r2, #0
 8002b50:	602a      	str	r2, [r5, #0]
 8002b52:	461a      	mov	r2, r3
 8002b54:	f000 f8f6 	bl	8002d44 <_write>
 8002b58:	1c43      	adds	r3, r0, #1
 8002b5a:	d102      	bne.n	8002b62 <_write_r+0x1e>
 8002b5c:	682b      	ldr	r3, [r5, #0]
 8002b5e:	b103      	cbz	r3, 8002b62 <_write_r+0x1e>
 8002b60:	6023      	str	r3, [r4, #0]
 8002b62:	bd38      	pop	{r3, r4, r5, pc}
 8002b64:	20000240 	.word	0x20000240

08002b68 <_close_r>:
 8002b68:	b538      	push	{r3, r4, r5, lr}
 8002b6a:	4d06      	ldr	r5, [pc, #24]	; (8002b84 <_close_r+0x1c>)
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	4604      	mov	r4, r0
 8002b70:	4608      	mov	r0, r1
 8002b72:	602b      	str	r3, [r5, #0]
 8002b74:	f000 f8b0 	bl	8002cd8 <_close>
 8002b78:	1c43      	adds	r3, r0, #1
 8002b7a:	d102      	bne.n	8002b82 <_close_r+0x1a>
 8002b7c:	682b      	ldr	r3, [r5, #0]
 8002b7e:	b103      	cbz	r3, 8002b82 <_close_r+0x1a>
 8002b80:	6023      	str	r3, [r4, #0]
 8002b82:	bd38      	pop	{r3, r4, r5, pc}
 8002b84:	20000240 	.word	0x20000240

08002b88 <_fstat_r>:
 8002b88:	b538      	push	{r3, r4, r5, lr}
 8002b8a:	4d07      	ldr	r5, [pc, #28]	; (8002ba8 <_fstat_r+0x20>)
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	4604      	mov	r4, r0
 8002b90:	4608      	mov	r0, r1
 8002b92:	4611      	mov	r1, r2
 8002b94:	602b      	str	r3, [r5, #0]
 8002b96:	f000 f8a7 	bl	8002ce8 <_fstat>
 8002b9a:	1c43      	adds	r3, r0, #1
 8002b9c:	d102      	bne.n	8002ba4 <_fstat_r+0x1c>
 8002b9e:	682b      	ldr	r3, [r5, #0]
 8002ba0:	b103      	cbz	r3, 8002ba4 <_fstat_r+0x1c>
 8002ba2:	6023      	str	r3, [r4, #0]
 8002ba4:	bd38      	pop	{r3, r4, r5, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000240 	.word	0x20000240

08002bac <_isatty_r>:
 8002bac:	b538      	push	{r3, r4, r5, lr}
 8002bae:	4d06      	ldr	r5, [pc, #24]	; (8002bc8 <_isatty_r+0x1c>)
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	4604      	mov	r4, r0
 8002bb4:	4608      	mov	r0, r1
 8002bb6:	602b      	str	r3, [r5, #0]
 8002bb8:	f000 f89e 	bl	8002cf8 <_isatty>
 8002bbc:	1c43      	adds	r3, r0, #1
 8002bbe:	d102      	bne.n	8002bc6 <_isatty_r+0x1a>
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	b103      	cbz	r3, 8002bc6 <_isatty_r+0x1a>
 8002bc4:	6023      	str	r3, [r4, #0]
 8002bc6:	bd38      	pop	{r3, r4, r5, pc}
 8002bc8:	20000240 	.word	0x20000240

08002bcc <_lseek_r>:
 8002bcc:	b538      	push	{r3, r4, r5, lr}
 8002bce:	4d07      	ldr	r5, [pc, #28]	; (8002bec <_lseek_r+0x20>)
 8002bd0:	4604      	mov	r4, r0
 8002bd2:	4608      	mov	r0, r1
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	602a      	str	r2, [r5, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f000 f894 	bl	8002d08 <_lseek>
 8002be0:	1c43      	adds	r3, r0, #1
 8002be2:	d102      	bne.n	8002bea <_lseek_r+0x1e>
 8002be4:	682b      	ldr	r3, [r5, #0]
 8002be6:	b103      	cbz	r3, 8002bea <_lseek_r+0x1e>
 8002be8:	6023      	str	r3, [r4, #0]
 8002bea:	bd38      	pop	{r3, r4, r5, pc}
 8002bec:	20000240 	.word	0x20000240

08002bf0 <memcpy>:
 8002bf0:	440a      	add	r2, r1
 8002bf2:	4291      	cmp	r1, r2
 8002bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002bf8:	d100      	bne.n	8002bfc <memcpy+0xc>
 8002bfa:	4770      	bx	lr
 8002bfc:	b510      	push	{r4, lr}
 8002bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c06:	4291      	cmp	r1, r2
 8002c08:	d1f9      	bne.n	8002bfe <memcpy+0xe>
 8002c0a:	bd10      	pop	{r4, pc}

08002c0c <memmove>:
 8002c0c:	4288      	cmp	r0, r1
 8002c0e:	b510      	push	{r4, lr}
 8002c10:	eb01 0402 	add.w	r4, r1, r2
 8002c14:	d902      	bls.n	8002c1c <memmove+0x10>
 8002c16:	4284      	cmp	r4, r0
 8002c18:	4623      	mov	r3, r4
 8002c1a:	d807      	bhi.n	8002c2c <memmove+0x20>
 8002c1c:	1e43      	subs	r3, r0, #1
 8002c1e:	42a1      	cmp	r1, r4
 8002c20:	d008      	beq.n	8002c34 <memmove+0x28>
 8002c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002c2a:	e7f8      	b.n	8002c1e <memmove+0x12>
 8002c2c:	4402      	add	r2, r0
 8002c2e:	4601      	mov	r1, r0
 8002c30:	428a      	cmp	r2, r1
 8002c32:	d100      	bne.n	8002c36 <memmove+0x2a>
 8002c34:	bd10      	pop	{r4, pc}
 8002c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002c3e:	e7f7      	b.n	8002c30 <memmove+0x24>

08002c40 <__malloc_lock>:
 8002c40:	4801      	ldr	r0, [pc, #4]	; (8002c48 <__malloc_lock+0x8>)
 8002c42:	f7ff b9d1 	b.w	8001fe8 <__retarget_lock_acquire_recursive>
 8002c46:	bf00      	nop
 8002c48:	20000238 	.word	0x20000238

08002c4c <__malloc_unlock>:
 8002c4c:	4801      	ldr	r0, [pc, #4]	; (8002c54 <__malloc_unlock+0x8>)
 8002c4e:	f7ff b9cc 	b.w	8001fea <__retarget_lock_release_recursive>
 8002c52:	bf00      	nop
 8002c54:	20000238 	.word	0x20000238

08002c58 <_realloc_r>:
 8002c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c5a:	4607      	mov	r7, r0
 8002c5c:	4614      	mov	r4, r2
 8002c5e:	460e      	mov	r6, r1
 8002c60:	b921      	cbnz	r1, 8002c6c <_realloc_r+0x14>
 8002c62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002c66:	4611      	mov	r1, r2
 8002c68:	f7ff ba74 	b.w	8002154 <_malloc_r>
 8002c6c:	b922      	cbnz	r2, 8002c78 <_realloc_r+0x20>
 8002c6e:	f7ff fa21 	bl	80020b4 <_free_r>
 8002c72:	4625      	mov	r5, r4
 8002c74:	4628      	mov	r0, r5
 8002c76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c78:	f000 f826 	bl	8002cc8 <_malloc_usable_size_r>
 8002c7c:	42a0      	cmp	r0, r4
 8002c7e:	d20f      	bcs.n	8002ca0 <_realloc_r+0x48>
 8002c80:	4621      	mov	r1, r4
 8002c82:	4638      	mov	r0, r7
 8002c84:	f7ff fa66 	bl	8002154 <_malloc_r>
 8002c88:	4605      	mov	r5, r0
 8002c8a:	2800      	cmp	r0, #0
 8002c8c:	d0f2      	beq.n	8002c74 <_realloc_r+0x1c>
 8002c8e:	4631      	mov	r1, r6
 8002c90:	4622      	mov	r2, r4
 8002c92:	f7ff ffad 	bl	8002bf0 <memcpy>
 8002c96:	4631      	mov	r1, r6
 8002c98:	4638      	mov	r0, r7
 8002c9a:	f7ff fa0b 	bl	80020b4 <_free_r>
 8002c9e:	e7e9      	b.n	8002c74 <_realloc_r+0x1c>
 8002ca0:	4635      	mov	r5, r6
 8002ca2:	e7e7      	b.n	8002c74 <_realloc_r+0x1c>

08002ca4 <_read_r>:
 8002ca4:	b538      	push	{r3, r4, r5, lr}
 8002ca6:	4d07      	ldr	r5, [pc, #28]	; (8002cc4 <_read_r+0x20>)
 8002ca8:	4604      	mov	r4, r0
 8002caa:	4608      	mov	r0, r1
 8002cac:	4611      	mov	r1, r2
 8002cae:	2200      	movs	r2, #0
 8002cb0:	602a      	str	r2, [r5, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	f000 f830 	bl	8002d18 <_read>
 8002cb8:	1c43      	adds	r3, r0, #1
 8002cba:	d102      	bne.n	8002cc2 <_read_r+0x1e>
 8002cbc:	682b      	ldr	r3, [r5, #0]
 8002cbe:	b103      	cbz	r3, 8002cc2 <_read_r+0x1e>
 8002cc0:	6023      	str	r3, [r4, #0]
 8002cc2:	bd38      	pop	{r3, r4, r5, pc}
 8002cc4:	20000240 	.word	0x20000240

08002cc8 <_malloc_usable_size_r>:
 8002cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ccc:	1f18      	subs	r0, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bfbc      	itt	lt
 8002cd2:	580b      	ldrlt	r3, [r1, r0]
 8002cd4:	18c0      	addlt	r0, r0, r3
 8002cd6:	4770      	bx	lr

08002cd8 <_close>:
 8002cd8:	4b02      	ldr	r3, [pc, #8]	; (8002ce4 <_close+0xc>)
 8002cda:	2258      	movs	r2, #88	; 0x58
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce2:	4770      	bx	lr
 8002ce4:	20000240 	.word	0x20000240

08002ce8 <_fstat>:
 8002ce8:	4b02      	ldr	r3, [pc, #8]	; (8002cf4 <_fstat+0xc>)
 8002cea:	2258      	movs	r2, #88	; 0x58
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf2:	4770      	bx	lr
 8002cf4:	20000240 	.word	0x20000240

08002cf8 <_isatty>:
 8002cf8:	4b02      	ldr	r3, [pc, #8]	; (8002d04 <_isatty+0xc>)
 8002cfa:	2258      	movs	r2, #88	; 0x58
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	2000      	movs	r0, #0
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000240 	.word	0x20000240

08002d08 <_lseek>:
 8002d08:	4b02      	ldr	r3, [pc, #8]	; (8002d14 <_lseek+0xc>)
 8002d0a:	2258      	movs	r2, #88	; 0x58
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d12:	4770      	bx	lr
 8002d14:	20000240 	.word	0x20000240

08002d18 <_read>:
 8002d18:	4b02      	ldr	r3, [pc, #8]	; (8002d24 <_read+0xc>)
 8002d1a:	2258      	movs	r2, #88	; 0x58
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8002d22:	4770      	bx	lr
 8002d24:	20000240 	.word	0x20000240

08002d28 <_sbrk>:
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <_sbrk+0x14>)
 8002d2a:	6819      	ldr	r1, [r3, #0]
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	b909      	cbnz	r1, 8002d34 <_sbrk+0xc>
 8002d30:	4903      	ldr	r1, [pc, #12]	; (8002d40 <_sbrk+0x18>)
 8002d32:	6019      	str	r1, [r3, #0]
 8002d34:	6818      	ldr	r0, [r3, #0]
 8002d36:	4402      	add	r2, r0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	4770      	bx	lr
 8002d3c:	200000a0 	.word	0x200000a0
 8002d40:	20000248 	.word	0x20000248

08002d44 <_write>:
 8002d44:	4b02      	ldr	r3, [pc, #8]	; (8002d50 <_write+0xc>)
 8002d46:	2258      	movs	r2, #88	; 0x58
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d4e:	4770      	bx	lr
 8002d50:	20000240 	.word	0x20000240

08002d54 <_init>:
 8002d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d56:	bf00      	nop
 8002d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d5a:	bc08      	pop	{r3}
 8002d5c:	469e      	mov	lr, r3
 8002d5e:	4770      	bx	lr

08002d60 <_fini>:
 8002d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d62:	bf00      	nop
 8002d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d66:	bc08      	pop	{r3}
 8002d68:	469e      	mov	lr, r3
 8002d6a:	4770      	bx	lr
